// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x3d\x6f\x13\x41\x10\x7d\xe7\xf3\x17\x4e\x04\x29\x00\x59\x22\x85\x4b\x0a\x64\x9b\xfc\x02\x13\x89\x40\xe1\xc2\x42\x42\x4a\xb7\x5a\xac\x05\x2c\xce\xf6\xe9\xee\x80\x04\x90\xa0\x89\x44\x41\x01\x05\xfc\x00\x0a\x1a\x7a\x52\x3a\x25\x05\x05\x15\x25\x25\x1d\x12\x05\x12\xa9\x38\xb4\x7b\x73\x9c\x99\xbd\xc3\x16\x0d\x45\x32\x92\x77\x3c\x6f\x67\xe6\xed\xcd\xcc\x7d\x3c\xbe\xdc\xdf\x2a\x39\x0e\x52\x71\xf0\x03\x99\x95\xc9\xd5\x5a\xf6\xbf\x47\xeb\x29\x38\x98\x9d\x4d\xb0\x3d\x00\x03\x00\x0f\x1b\x87\xb1\xb6\x67\xaf\x13\xbc\x56\x02\x0e\xe3\x38\x6e\xb2\xa4\x7b\x86\x0b\x38\x83\x8a\xb1\xa5\x9b\xe0\x33\x99\xe8\x66\xc9\xf6\x5f\x05\xb0\x4f\xf6\x4b\xd2\xff\x9b\x5f\xe7\xa8\x03\x28\x03\x78\x92\x53\xb7\xa3\x2a\x2e\xd5\xe4\xb8\x2e\x7f\xca\x71\x5d\xf2\xe5\xca\xa0\x8f\x9f\x71\x1c\xaf\x91\xed\x3c\xb8\x86\xfa\xa3\x15\xe7\x1c\x00\x8d\x35\x09\x4f\x6b\x76\x1a\xc0\x05\x86\xfd\x4d\xbe\x9a\xd5\x85\xcf\xf0\x2f\x66\xad\x58\x78\xe2\xed\xe6\xe6\x72\xe9\x99\x31\x2f\x33\x73\xce\x86\x85\xbf\x33\xf8\x8a\x85\xbf\x35\x78\xcd\xc2\x5f\x19\xbc\x6e\xe1\x5b\x06\x3f\x61\xe1\xd7\x0d\x6e\x9f\xb3\x66\x70\xfb\x9c\xe7\x49\x3b\xe4\xb3\x3d\x67\xd7\x17\xec\x6b\xf6\x75\xb2\x1b\x34\xcb\xdd\x39\x5b\xcf\x34\xda\x91\xda\x89\x10\x05\x72\xa8\xfc\xe9\x68\x12\x09\x11\xee\x86\x42\xed\x8c\x22\xb4\x03\xe5\x65\x1b\x9d\x40\xde\xd7\x7b\x43\xe9\x79\x61\xe7\xb7\xd3\x58\xfa\x61\x27\x92\x23\x4f\xe8\x8d\x04\xb3\xb2\x4d\x22\x15\x2c\x4e\x67\xbc\x78\xbe\x0c\x1c\xde\x0a\xa6\x77\x7d\x31\x96\x3e\xc4\x3d\x15\x84\xa3\xe9\x04\xc2\x1b\x0d\xd5\x24\x54\x26\x79\x5b\xdd\x16\x37\x03\x39\x56\x68\x87\x51\x10\xc9\x1b\x68\x87\xbb\x63\xad\xfb\x9b\x9b\x17\xc5\x86\x56\x5d\xb1\x61\xd5\xf8\x5f\xe4\x13\xd5\x93\xcb\xa0\x9a\xe8\xef\x0c\xe7\xef\x68\x87\x7e\x55\x86\xf7\x0a\xf8\xca\xcc\x9e\x2e\x88\xe7\xf7\x18\x9f\xd0\x3b\x34\x1f\x5c\xbe\xd1\x08\xb6\xc8\x3e\x49\xd7\x99\xc6\xa7\xf7\x7b\xab\x80\xff\x60\x49\xfe\xf5\x02\xfe\xb5\xaa\xcd\x5f\xc9\xe1\x7f\x43\xfc\xbc\x07\x3d\x2a\x34\xff\x7e\xe0\xf5\x7b\x51\x10\xbf\x5d\x5a\x2e\xfe\x52\x41\xbc\xef\x2e\x17\x7f\x50\x10\xff\xb4\x9c\xef\xcf\xe7\x67\xbf\x20\xfe\x59\x41\x3c\xb7\x3f\x50\x3c\xfb\x6c\xc2\x73\x72\xe4\x73\xc8\xfb\xf7\xbe\xa0\x7f\xdd\x9c\xfe\xad\xe6\xf4\xef\x73\x0e\xb7\x96\x8f\xc4\xdf\xa2\x0b\x76\x58\xff\xd3\xf7\xca\xaf\x00\x00\x00\xff\xff\xbe\xf1\x92\x0c\x08\x0b\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 2824, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x31\x4c\x13\x61\x14\x7e\x07\x94\x96\x12\x49\x07\x63\xea\xc9\x70\x4b\x13\x4c\x48\x01\x07\x63\x48\x48\x70\x10\x17\x24\x84\x89\xad\x9c\xed\x09\x4d\x4a\x69\xee\x0e\x28\x9c\x89\x26\xc6\x04\x99\x88\xc6\xc4\xe0\x20\x26\x0e\xba\xe9\x54\x9c\xca\xa8\x1b\x23\x23\x23\x23\x9b\x1d\x8c\x67\xde\x7f\xdf\xf5\xca\x7f\x77\x82\x46\x37\xff\x84\xbe\xfb\xbe\xfb\xdf\x7d\xf7\xbf\xef\xbd\xe3\xd1\x9d\xe9\xa9\x2e\x45\x21\x7f\x29\xf4\x8d\x02\x14\xac\x4c\x2a\xb8\x9e\xc4\xef\x00\x29\xd4\xbc\xe2\x71\x4f\x89\x88\xb7\x34\x53\x01\x1e\x60\x9c\x0c\x70\x82\x88\x9c\xf4\x8e\xcb\x78\x31\x45\xa4\x11\xd1\x3a\xa2\xb3\xfd\x4a\xf0\xce\xe6\x9e\x88\x8d\x3e\x2f\xcf\xd9\x7d\x2f\xf0\x86\xee\x3d\xd8\x51\x3f\x7a\xfb\x76\x5b\x88\xa7\x88\x27\x88\xc7\x88\x47\x88\x87\x88\x5f\x10\x0f\x10\xf7\x45\x6c\xbe\xf5\x74\x92\x0a\xd1\xbe\xeb\xba\x8d\x2e\xa2\x0c\xde\x37\x23\x74\x6f\x41\xf7\x14\xef\x31\x0a\x7c\x02\x3c\x04\x7c\x0c\xac\x01\x1f\x01\x67\x81\x0f\x81\x33\xc0\xde\xfb\x34\xdf\x41\xbf\x87\x68\xc7\x75\xdd\xa6\xee\xe1\x6c\xd7\xd9\xfa\x37\x9f\x78\xb1\x91\x20\xaa\xe1\xfd\xae\xf2\x3e\x85\x48\x33\x4c\x93\xef\x4d\xe4\x4a\x69\x47\x7d\x2c\x9e\xcb\xfc\xaa\x36\x33\xc7\xd7\x5a\xae\xb2\xea\xa8\xf5\x36\xaf\xd5\xca\x25\xf0\x15\x47\xad\xb5\xf9\x61\xcd\xa8\xf2\xb5\x6d\x98\xe3\x8e\xba\xd4\xe6\x6d\xbd\x5c\xe1\xeb\xa2\xce\xfb\x17\x04\xbf\x9e\xf4\x7c\xb3\x76\xb7\xbc\x73\x95\x3c\x7f\x3a\xeb\xb9\x80\x7a\x5e\x67\xde\xc2\x39\x12\x41\x3f\xf4\xf2\x79\x70\xbe\x97\xfe\x39\xff\x55\x3f\x29\x24\xfa\xda\x51\xa3\xfb\xa9\x81\xa6\xf7\x7d\xf6\xfd\xf5\x7d\xf5\xfd\xf4\x7d\xf4\xfd\x73\x54\xf4\x93\xba\x2f\xf9\xdb\xba\x50\x7f\xfd\x0d\xff\x0d\xd3\x9c\xe0\x7b\xb9\x52\x9a\x3a\xfd\xd7\x66\xe6\x44\x33\xe6\x2a\xab\x5a\xa7\xff\xb5\x72\x09\x3c\xf7\xc5\x19\xff\xeb\x7c\x5d\xb6\xc7\xb5\x8b\xfa\xff\x2b\xdf\x87\x7e\xc3\xf7\x9e\x8e\x3f\xef\xe7\xff\xe2\xc5\xb5\xe7\xba\xf3\x6c\xf2\x5c\xf2\xec\xf2\xdc\xf2\x6c\xf3\x5c\xf3\xec\xf3\xdc\x47\xec\xaf\xb3\x8f\x71\xdb\xef\xce\x4e\xd3\x0f\xd7\x75\x33\xc8\x53\x36\xe7\x28\xf5\xb0\x5f\xb9\x86\xbe\xcc\x82\x9f\x45\x1f\x5e\x26\xa2\x61\x70\xad\xa8\x7f\x10\x11\xab\x9b\xba\x63\xf8\x44\x88\x7b\x2e\x74\xfb\x42\xfc\x33\xc1\xa7\x43\xfc\x94\xe0\x93\x21\xfe\x9e\xe0\xc3\xba\x49\xc1\x87\x75\xe7\x71\x16\x05\xdf\x93\x94\x84\x07\xb1\x2f\x0d\x6e\xb4\x03\x8b\xd2\xe4\x6d\xa3\x6e\x93\x6d\xea\x45\xa3\xb6\x52\xae\xda\x85\x82\xb5\x61\x15\xb8\xf8\x94\x37\x8d\x4a\x70\x63\xc4\xd4\xd7\xf9\x1e\xbb\x63\x8d\xb4\x37\x2d\xeb\x35\x6b\xc4\x58\x33\xaa\xb6\x15\x7e\x0a\x5b\x7e\xfe\x63\xc4\xae\xc2\x9a\x61\x5a\xe5\x95\x2a\x15\x2a\xe5\xa2\x51\xb5\x0c\x91\x97\x37\x96\x0a\x0f\x4c\x7d\xd9\xa0\xbc\x65\x9b\xb6\x7e\x9f\xf2\xd6\xc6\xb2\x88\xe6\x4a\x49\xb7\x75\xa6\xc7\xf2\x63\x37\x23\x8d\xfa\x83\xf5\x41\xf8\x1b\x5e\x93\xb0\xea\xab\xc4\xcb\xad\xa4\xe0\xaf\x57\xce\x8f\xd1\x93\x3f\x15\x8b\xe7\xe4\xcf\x4a\xdf\xd5\x94\xb4\xaf\x48\x14\xd1\x85\x68\x20\xcc\x06\xaf\x4b\x38\xa7\x9f\xef\xf3\x5a\x8c\xfe\x0e\x74\xe5\xd9\x91\xf5\x07\x63\xf4\x33\x11\xfa\x89\x08\xfd\xdb\xd0\x97\x3d\xd8\x42\xa1\xb2\x92\xbe\x5c\xbf\xcf\xc8\xbf\x21\xf1\x7b\x18\x9d\x79\xf9\xbd\x10\xfd\xc7\xbe\x88\xd1\x6f\x25\xa2\xf5\x64\xff\xb7\x63\xf2\xbf\xc7\xe4\xcb\xf8\x0d\xf2\x25\x9b\xdb\x86\xc8\x7d\x24\xd7\xff\x75\x4c\xfd\x35\xd4\x5f\x03\xe6\xfa\xf7\x47\xd4\xff\x53\x94\x36\xeb\x42\xff\x00\x58\x91\xfa\xc7\xff\xde\xfe\x0c\x00\x00\xff\xff\x97\x34\xc4\x97\x90\x0b\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 2960, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

