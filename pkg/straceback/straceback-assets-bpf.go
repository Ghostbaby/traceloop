// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x40\x14\xfe\x1c\x37\x24\x4d\x8b\xe8\x00\x28\x12\x1d\x32\x32\xa0\x24\x74\x62\x0c\x95\x28\x4b\x86\x0a\x09\xa9\x62\x31\x57\xeb\x80\x88\xfc\xb0\x6c\x03\x0d\x3f\x44\x97\x4a\xfd\x07\x98\x41\xa8\x03\x7f\x00\x12\x62\x0a\x03\x8c\x30\x32\x30\x33\x30\x30\x22\x51\x09\x09\xa3\xbb\x3c\xe3\xf0\xce\x47\x22\x96\x0c\xf4\x93\xe2\xcb\xfb\xee\x7d\xef\x9d\xdf\xbd\xb3\xfd\xf8\x52\x7b\xa3\xe0\x38\x48\xe1\xe0\x3b\x32\x2b\xc3\x7e\x39\xfb\xdf\xa2\xeb\x0a\x1c\x8c\x4e\x8f\xb9\x3d\x00\x9b\x00\x1e\x54\x0e\x13\x65\x8f\x9e\x8f\xf9\x52\x01\x38\x4c\x92\xa4\xca\x82\xee\xe9\x5c\xc0\x29\x14\xb5\x2d\xdc\x31\x3f\x12\xe3\xb1\x5a\x30\xfd\x97\x01\xbc\x22\xfb\x09\x8d\xf3\xce\xaf\x62\xa8\xd2\x2c\x00\xd8\xcd\xa9\xdb\xff\x0a\x97\x6a\x72\x54\x97\x3f\x71\x54\x97\x7c\xa4\xe7\xa8\x09\x2a\x0e\x00\x75\x04\xa3\x38\x14\xbe\xdc\x16\xfe\xed\x39\x2f\x70\x4e\xb8\xbc\xd9\xc6\xcf\x24\x49\x56\xc8\x76\xee\x5f\x41\xf9\xe1\x92\x73\x06\x80\xe2\xaa\xc4\xa7\xbd\x74\x12\xc0\x39\xc6\xfd\x0d\x3f\xf4\xd5\x45\xc0\xf8\x6f\xfa\x5a\x34\xf8\xb1\xb7\x9b\x1b\xcb\xa5\x67\xe9\x24\xde\xeb\x75\x2e\x19\xfc\x5b\xcd\x2f\x1b\xfc\x6b\xcd\x97\x0c\xfe\x9a\xe6\x2b\x06\x7f\xa0\xf9\xb2\xc1\x6f\x68\x7e\xd1\xe0\x7d\xcd\x9b\xeb\x2f\x69\xde\x5c\xff\x59\x1a\x1d\xf2\xd9\x9a\xb0\x17\xa7\xcc\xab\xd5\xae\x92\x5d\xa1\xb3\xdf\x9c\xb0\x75\x9b\xd7\x63\xb9\x13\x43\x77\x79\x30\xe8\xf4\x63\xcf\x8b\x86\x91\x27\x77\x3a\x31\xea\xa1\xec\x66\x13\x8d\x50\xdc\x53\x73\xbe\xe8\x76\xa3\xc6\x6f\xa7\x9e\x08\xa2\x46\x2c\x3a\x5d\x4f\x4d\x4c\x70\xa9\xab\x19\xbb\x1f\xcb\x70\x7a\x70\xed\xc5\xa3\x67\xa4\x7f\x33\x1c\xdc\x09\xbc\x9e\x08\xe0\xdd\x95\x61\xd4\x19\xf4\xe1\x75\x3b\xbe\xec\x47\x52\x07\xaf\xcb\x5b\xde\x8d\x50\xf4\x24\xea\x51\x1c\xc6\x62\x1b\xf5\x68\xd8\x53\x63\x7b\x7d\xfd\xbc\xb7\xa6\x86\xa6\xb7\x66\x54\xfc\xdf\xf0\x99\xea\xcb\xb1\x4b\xad\x54\x60\xef\x7f\xfe\x8d\xe3\xd0\xef\x18\xe3\x5b\x96\x7c\x0b\xcc\x7e\x34\x45\xcf\xcf\x22\xef\xd8\x21\xf5\x13\x47\x8d\xd6\x5f\x23\xfb\x04\xdd\x67\xaa\x4f\x9f\x0b\x35\x4b\xfe\x37\x33\xe6\x5f\xb5\xe4\x6f\xe5\xe4\x2f\xe6\xe4\x7f\x49\xf9\xf9\x1e\xb4\xa8\xd0\xfc\xfb\x8b\xd7\xef\xa9\x45\xbf\x55\x98\x4d\x7f\xd1\xa2\x0f\xdc\xd9\xf4\x57\x2d\xfa\xfd\x85\xd9\xf4\x1f\x2c\xfa\x67\xc5\x7c\x7f\xde\x7f\xef\x2c\xfa\x03\x8b\x9e\xdb\x9f\x48\xcf\x3e\x5b\xf1\x82\xf4\xbc\x8f\xf9\xfe\x7f\xb4\xec\xff\xf5\x9c\xfd\x3f\x9e\xb3\xff\x5f\x73\x72\x2b\x7c\xa1\xfc\x17\xe8\x86\x1d\xd6\x3f\xe9\xfb\xeb\x57\x00\x00\x00\xff\xff\x95\x3b\xfb\x65\x88\x0c\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4f\x68\x1c\x55\x18\xff\x66\xb3\xdb\xdd\x6c\x9a\x74\xab\x8d\x8e\x63\x0e\x5b\xaa\x18\xaa\x26\x9b\xd4\x3f\xb1\x5e\xd6\x16\x6b\xc0\x08\xa5\x1e\x2c\x88\x6c\x26\xcb\x68\x43\xfe\x74\xdd\x59\xdb\x4c\x56\x70\x15\x8b\x25\xa7\x1a\x94\x06\x4f\x9b\x22\x18\x45\x41\x44\xd8\xde\xb6\x37\x73\x92\x9c\xa4\x27\xc9\x45\xc8\x45\xe8\x45\xcc\x41\x3b\x32\xef\xfb\xbd\x99\x9d\x37\xbb\xa6\x06\x42\x73\xf0\x41\xf2\xcb\xef\x37\xef\x7b\x7f\x7e\xef\x9b\x97\x6f\xf7\x83\x97\x27\xce\xc4\x34\x8d\x64\xd3\xe8\x4f\x0a\x58\xd0\x36\x1e\x08\xfe\xce\xe3\x77\x1f\x69\xd4\x7c\x88\xb5\x2b\x44\x94\x22\xa2\x66\x32\xe0\x7d\x1e\xef\x0e\x78\x82\x88\x1c\x33\x25\x78\xd5\xd8\x76\x05\xa6\xef\xdc\x65\x5c\x11\xbc\xc1\x8f\xa9\xba\x54\x17\x7c\x66\x69\x8d\x71\xf1\x1b\x81\x45\xe3\x5b\x8e\xfb\xe2\x7b\xc6\xa5\x3b\xc0\x2d\xe0\x26\xf0\x36\x70\x03\xb8\x0e\xbc\x05\xbc\x29\xb0\x79\x83\xe7\x4b\xc6\x88\xb6\x5d\xd7\xd5\x95\xcd\x5f\x11\x9e\x04\xfb\xe8\xef\x7e\x42\xf4\xa8\x2e\x6e\x8b\x75\x37\x57\x11\xaf\x11\xdd\x74\x5d\xb7\x11\x23\xca\x20\x2e\x23\xf6\x9b\x11\xcf\xa7\x6f\xf0\x3e\xaa\xc7\xb7\x78\xbf\x06\xaf\xc7\xf9\x14\xfb\x35\x36\x85\xee\x98\x3a\x38\xaf\xdb\xb9\xc6\x86\x38\x66\x16\x3a\xef\xcb\xb9\x9e\x81\x3e\x28\xe3\x59\x5f\xd6\xa1\xe7\xa0\x6f\x61\x1e\x8e\x77\x8a\x63\xac\x9f\x64\xdf\x1a\x09\xde\x9f\xf3\x19\x8f\xd3\xe8\x62\xfe\xd6\xc7\x9a\xcf\x05\xc6\xa1\x7f\xa8\xf9\x5c\xa0\x06\xfd\x23\xcd\xe7\x02\x63\xd0\x3f\xd1\x7c\x2e\x30\x09\xbd\xa6\xf9\x5c\xac\xab\xce\xfb\xf7\xf5\x84\xd4\xd9\xaf\x43\xe0\x87\xde\x00\x96\x81\x47\x81\x47\x80\xa7\x19\x67\x4e\xb2\xdf\xce\x57\x7c\x4e\xef\x24\x89\x3c\x07\x2e\x03\x9b\x5f\xe2\xdc\xe2\x44\x2b\xae\xeb\x36\x4d\xe6\x7a\x2c\x7c\xfe\x4d\x9b\xfc\xf5\x4c\xe2\x5c\x1f\x51\xce\x5d\x77\x5d\xb7\x6a\xf0\x3c\xce\x32\xd6\xbd\xc6\x79\xdd\x1f\x3b\x16\xf2\xa5\x6a\x5c\xe3\x3c\x30\xae\x02\x6b\xc0\x05\x60\x09\x78\x01\x38\x09\x3c\x0f\x3c\x0b\x1c\x07\xe6\x81\x63\xc0\x1c\x70\x10\x98\x05\xea\xc8\x7b\x02\xcf\xb8\x72\x5d\x31\xc1\x53\x3e\xaf\x11\xd1\xd3\x47\x83\x73\xab\x89\xbc\x41\xbe\xad\xf2\x3e\x3d\x1f\xe2\x8a\x8f\x74\x8f\x3e\xae\xb4\xf8\xe8\x2c\x73\x7e\xf7\xc7\x1e\xdb\x97\x3e\xc9\xfc\xfe\xef\x7e\xe9\x7b\xe4\x57\x86\xf6\x73\x5e\x05\xfe\x64\xf0\x7c\x27\x9f\xb2\x7b\xe4\x93\xbe\xef\xf3\xaa\x6b\x57\x79\x35\xb8\x47\x7e\x65\xf7\xbd\x5f\xf1\x5d\xf9\x95\xdb\x23\xbf\x06\xe1\xd7\xe3\xfb\xca\x2f\x67\x15\xf5\x94\x11\xf8\x96\xd8\x95\x6f\x63\x7b\xe2\x5b\x03\xcf\x3f\x97\xfd\x76\xaa\x1f\x53\x01\x17\xfb\x48\xd7\x95\x7b\x79\xcd\x6d\xf5\x7f\xc6\xe0\xba\x70\x66\xf1\x07\xf6\x63\x8a\x07\x28\x1e\xff\x31\x54\xf7\xf9\xf5\xa7\x81\xfa\x11\x75\x92\xac\xa3\x64\x9d\x25\xeb\x30\x59\xaf\x55\x0d\xae\x1f\x65\x5d\x27\x9f\xb7\xd6\x03\xb7\xda\xd4\x81\xff\x56\x7f\xd4\x77\x51\x7f\xa8\x3e\xc6\x5b\x7e\x28\x4e\xff\x37\x34\x0d\x79\x25\x6e\x01\xf8\xe2\x59\x6c\x57\xca\x66\xd1\x9a\x32\x8b\x33\xf7\x79\x81\xf7\xa9\xbd\x72\x76\x82\xee\xba\xae\x9b\x01\xd7\x16\xcf\x51\xea\xfd\x1e\xed\x51\xe4\xab\x0e\x3d\x9f\x66\xf4\xca\xeb\xa7\xa0\x8d\xb7\xfb\x80\xa8\xb4\xd3\xa2\x4f\x17\x8d\x2b\xf9\xfc\x24\xf4\x49\x45\xff\x9b\x58\xdf\xea\x0a\xeb\xbf\x43\xcf\x2b\x39\xfd\x2a\xc6\xd1\x13\x61\xfd\x45\xe8\x25\x45\x3f\x02\x3d\x7f\x20\xac\x1f\x84\xbe\xa2\xe8\xbf\x60\xde\x52\x32\xac\xff\x0c\x7d\x5d\xd1\x07\x30\xce\x96\xe2\xcd\x09\xe8\xf5\x54\x58\x3f\x06\x7d\x5b\xd1\xff\xc0\xf8\xb7\xbb\xc3\xfa\x6f\xd0\x73\xe9\xb0\x9e\xc0\x38\xa4\xf8\xf9\x2b\xfa\xab\xf7\xc9\x4f\x72\x1c\x45\x67\xb5\x2b\x2a\x0a\x3d\x11\xd1\xea\x22\x4f\xba\x23\xfa\x75\xa1\xa7\x23\xfa\x19\xa1\x27\x23\xfa\x39\xa1\xa7\x22\xfa\x9b\x42\x8f\xae\x27\x29\xf4\xe8\x7a\x36\x80\x1a\x72\x77\x23\x16\xf0\x87\x3d\x2d\x1e\xe6\xe3\x89\x30\x2f\x1d\x08\xf3\x7a\x32\xcc\x37\x52\x61\x9e\x4a\x87\x79\x46\x0b\xf3\x01\xac\xc7\xeb\xf6\xa0\xbc\x7f\xc0\xc5\x47\xd5\xa1\x8a\xb5\x50\x21\x71\x0b\x95\x2e\x4e\xcf\x57\x0a\x05\xdb\xb1\x0b\xd6\xc2\x74\x85\x86\xca\xd6\x6c\xf0\x60\xb8\x6c\x5e\xf6\x9e\x15\xcd\xd9\x59\x7b\xd8\xef\x34\x67\x96\xec\x61\xeb\x92\x35\x5f\xb1\xf9\x6f\xd9\x25\x3a\xe6\x7c\xc5\x2a\xef\x3c\xa8\xe8\x55\xb8\x64\x95\xed\xe9\x8b\xf3\x54\x98\x9d\x2e\x5a\xf3\xb6\x25\xe2\x86\xac\x0b\x85\xb7\xcb\xe6\x9c\x45\x43\x76\xa5\x5c\x31\xa7\x68\xc8\x76\xe6\x3c\x9c\x38\x75\x2a\x57\x78\x81\x61\x54\xe2\x18\xe3\xf3\x0c\x27\x80\x23\x92\x3f\x07\x0e\x7c\x16\x51\x12\x9f\x41\x37\x00\x70\x44\xf2\x51\x74\x1b\x81\x0e\x1c\xcd\x45\x52\x62\x57\xad\xc1\x6f\x53\xa4\x2d\x1c\x66\x7c\x5d\x79\xbf\xd5\xab\x50\xc3\x8f\x72\x9d\xe0\x3b\xb3\x68\x53\xff\x55\xbf\xb7\x43\x7c\x5e\x79\xb5\xd4\x37\xe7\x5d\xa2\x36\x6f\x25\xd1\x3a\x2e\xfa\x1a\x78\x2f\xf6\x29\xe3\xe5\xff\x81\x6c\x87\xf9\x6b\x98\x57\xbd\xfb\xd5\xf9\x07\x3a\xcc\x3f\x7e\x38\x3c\x4f\x2f\xea\x39\x75\xfe\x97\x30\xbf\x7a\x06\xeb\x3d\x8c\xea\xf7\x73\xaa\x7f\xaf\x75\x88\xdf\x3c\x78\x6f\xf1\xab\x1d\xe2\xb7\x7b\xdb\xf7\x57\xcf\x7f\xa5\x43\xfc\x5f\x1d\xe2\x55\xfe\x1d\xe2\x23\xd7\x73\x1f\x83\x9a\x47\xaa\xff\x5f\x77\xf0\xff\x3c\xfc\xcf\x82\x7b\xcb\xe9\x69\xe3\x7f\xb3\xdd\xdc\xde\xbc\x98\xff\x6a\xcb\xbd\xda\xdf\x12\x2f\xeb\x85\x7f\x02\x00\x00\xff\xff\x52\x73\x1f\x1d\x50\x16\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 5712, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

