// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x40\x14\xfe\x1c\x37\x24\x4d\x8b\xe8\x00\x28\x12\x1d\x32\x32\xa0\x24\x74\x62\x0c\x95\x28\x4b\x86\x0a\x09\xa9\x62\x31\x57\xeb\x80\x88\xfc\xb0\x6c\x03\x0d\x3f\x44\x97\x4a\xfd\x07\x98\x41\xa8\x03\x7f\x00\x12\x62\x0a\x03\x8c\x30\x32\x30\x33\x30\x30\x22\x51\x09\x09\xa3\xbb\x3c\xe3\xf0\xce\x47\x22\x96\x0c\xf4\x93\xe2\xcb\xfb\xee\x7d\xef\x9d\xdf\xbd\xb3\xfd\xf8\x52\x7b\xa3\xe0\x38\x48\xe1\xe0\x3b\x32\x2b\xc3\x7e\x39\xfb\xdf\xa2\xeb\x0a\x1c\x8c\x4e\x8f\xb9\x3d\x00\x9b\x00\x1e\x54\x0e\x13\x65\x8f\x9e\x8f\xf9\x52\x01\x38\x4c\x92\xa4\xca\x82\xee\xe9\x5c\xc0\x29\x14\xb5\x2d\xdc\x31\x3f\x12\xe3\xb1\x5a\x30\xfd\x97\x01\xbc\x22\xfb\x09\x8d\xf3\xce\xaf\x62\xa8\xd2\x2c\x00\xd8\xcd\xa9\xdb\xff\x0a\x97\x6a\x72\x54\x97\x3f\x71\x54\x97\x7c\xa4\xe7\xa8\x09\x2a\x0e\x00\x75\x04\xa3\x38\x14\xbe\xdc\x16\xfe\xed\x39\x2f\x70\x4e\xb8\xbc\xd9\xc6\xcf\x24\x49\x56\xc8\x76\xee\x5f\x41\xf9\xe1\x92\x73\x06\x80\xe2\xaa\xc4\xa7\xbd\x74\x12\xc0\x39\xc6\xfd\x0d\x3f\xf4\xd5\x45\xc0\xf8\x6f\xfa\x5a\x34\xf8\xb1\xb7\x9b\x1b\xcb\xa5\x67\xe9\x24\xde\xeb\x75\x2e\x19\xfc\x5b\xcd\x2f\x1b\xfc\x6b\xcd\x97\x0c\xfe\x9a\xe6\x2b\x06\x7f\xa0\xf9\xb2\xc1\x6f\x68\x7e\xd1\xe0\x7d\xcd\x9b\xeb\x2f\x69\xde\x5c\xff\x59\x1a\x1d\xf2\xd9\x9a\xb0\x17\xa7\xcc\xab\xd5\xae\x92\x5d\xa1\xb3\xdf\x9c\xb0\x75\x9b\xd7\x63\xb9\x13\x43\x77\x79\x30\xe8\xf4\x63\xcf\x8b\x86\x91\x27\x77\x3a\x31\xea\xa1\xec\x66\x13\x8d\x50\xdc\x53\x73\xbe\xe8\x76\xa3\xc6\x6f\xa7\x9e\x08\xa2\x46\x2c\x3a\x5d\x4f\x4d\x4c\x70\xa9\xab\x19\xbb\x1f\xcb\x70\x7a\x70\xed\xc5\xa3\x67\xa4\x7f\x33\x1c\xdc\x09\xbc\x9e\x08\xe0\xdd\x95\x61\xd4\x19\xf4\xe1\x75\x3b\xbe\xec\x47\x52\x07\xaf\xcb\x5b\xde\x8d\x50\xf4\x24\xea\x51\x1c\xc6\x62\x1b\xf5\x68\xd8\x53\x63\x7b\x7d\xfd\xbc\xb7\xa6\x86\xa6\xb7\x66\x54\xfc\xdf\xf0\x99\xea\xcb\xb1\x4b\xad\x54\x60\xef\x7f\xfe\x8d\xe3\xd0\xef\x18\xe3\x5b\x96\x7c\x0b\xcc\x7e\x34\x45\xcf\xcf\x22\xef\xd8\x21\xf5\x13\x47\x8d\xd6\x5f\x23\xfb\x04\xdd\x67\xaa\x4f\x9f\x0b\x35\x4b\xfe\x37\x33\xe6\x5f\xb5\xe4\x6f\xe5\xe4\x2f\xe6\xe4\x7f\x49\xf9\xf9\x1e\xb4\xa8\xd0\xfc\xfb\x8b\xd7\xef\xa9\x45\xbf\x55\x98\x4d\x7f\xd1\xa2\x0f\xdc\xd9\xf4\x57\x2d\xfa\xfd\x85\xd9\xf4\x1f\x2c\xfa\x67\xc5\x7c\x7f\xde\x7f\xef\x2c\xfa\x03\x8b\x9e\xdb\x9f\x48\xcf\x3e\x5b\xf1\x82\xf4\xbc\x8f\xf9\xfe\x7f\xb4\xec\xff\xf5\x9c\xfd\x3f\x9e\xb3\xff\x5f\x73\x72\x2b\x7c\xa1\xfc\x17\xe8\x86\x1d\xd6\x3f\xe9\xfb\xeb\x57\x00\x00\x00\xff\xff\x95\x3b\xfb\x65\x88\x0c\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x41\x68\x1c\x55\x18\xfe\x67\xb3\xdb\xdd\x6c\x35\x59\xac\xd1\x75\xec\x61\x8a\x0d\xc4\x12\xb7\x9b\x54\x6b\x6c\x29\xd4\x8a\xb5\x60\x2d\x21\x7a\x28\x14\xd9\x6e\x36\xa3\x5d\x92\xa6\x71\x66\xd3\xec\x64\x05\x03\x52\x0c\x3d\x49\xb5\x18\x7a\x4a\xac\x87\x28\x0a\x22\xc2\xe6\x20\x6c\x6e\xf6\x24\x9e\xc4\x93\xf4\x22\xf4\x22\xe4\x22\xe6\x62\x47\xde\xfb\xbf\x37\xb3\xf3\x76\xb7\xd1\x40\x68\x0e\x0e\x24\xdf\xfc\xdf\xfb\xff\xf7\xde\xff\xbf\xff\xbd\xfd\xdf\x7c\xf0\xea\xd9\xd3\x31\xc3\x20\xf5\x18\xf4\x17\x85\x52\xf8\x2c\x3f\x1e\xbe\x9f\xc4\xff\x5e\x32\xa8\xf1\x04\x73\xd7\x88\x28\x45\x44\x8d\xee\x50\xee\x11\x72\x2a\x94\x13\x44\xe4\x15\x99\xa8\x99\x9b\xbe\xc4\xf4\xc6\x7d\xc6\x25\x29\xd7\x93\xac\x5f\x9b\x5f\x96\xf2\xe4\xfc\x2a\xeb\xdd\xda\x94\x7a\x93\xb7\xbe\x92\x72\xc9\xfc\x9a\xf9\xeb\xf7\xd8\xfe\xfa\xb7\x2c\xcf\x6f\x00\xef\x01\xef\x02\x7f\x05\xfe\x0c\xbc\x03\x5c\x07\xae\x49\x6c\x7c\xce\xe3\x27\x63\x44\x9b\xbe\xef\x67\xb5\x60\x5c\x93\x31\x0a\xfd\xec\xeb\x3e\x2e\x35\x1a\x2b\xb0\x33\x88\xd6\x7c\xdf\xaf\xc7\x88\x32\xd0\xcf\x48\xbf\x33\xb2\xbd\x7c\x1b\xfe\x98\x3c\xbe\x77\x83\xed\xbc\x62\x16\x71\xe1\xf9\x79\x37\x53\xe0\x2d\xf0\x3c\x7f\xef\xd3\x0c\xf8\x01\xf0\xec\x9f\xb7\x94\x05\x9f\x07\xcf\xfe\xd7\x0d\x9e\x6f\x1d\xf3\x7e\xdb\x61\x87\xea\xf0\xa7\x37\x8f\xf1\x3f\xe1\x71\xbc\xf1\x11\xb6\x3f\xc4\x71\x14\x7e\x48\xbb\x59\xd8\xc5\x60\x07\xac\x27\xd0\x5e\x31\x02\x59\xb6\xf7\xa3\x3d\x8e\xf6\xaa\x11\xc8\xb2\xfd\x2d\xa2\x48\xff\xae\xd6\xff\x29\x35\x2f\xf6\x33\x68\xc7\x7a\xf4\x1e\x60\x9c\x34\x39\x9e\xde\x2a\xe7\xc7\xbb\x29\x22\xe1\xc9\x1c\xb0\xf1\x05\xd6\x25\x4e\xb4\xe4\xfb\x7e\xa3\xc8\x72\x36\x16\x5d\xd7\xc6\x87\xa1\x3f\x17\xb1\x6e\x4f\x11\x91\x3b\x3f\xc0\x79\xf1\x11\xec\x0c\x22\xcb\x76\x1c\xf1\x7e\xa2\x7f\x22\x5d\x33\x2d\x5f\xf1\xb3\xd6\xb9\x31\xf1\x6e\xf5\x4f\xcd\xd6\xcc\x6c\xc0\x5b\x33\xe5\x09\xf0\x53\x35\x33\x13\xf0\x83\x96\x3d\x2d\xde\x2b\xb6\x73\xac\x66\xa6\x02\xbe\x52\x2c\x4f\x89\xf7\x52\x51\xe8\x13\xfb\x77\x9b\xf3\x7c\xae\x8b\xfd\xf2\x26\x38\x3f\x9a\xf3\x8e\x90\x77\xcf\x0a\x1e\xeb\x20\xfc\xd8\xa3\xe9\x65\x7d\xdf\xaf\x99\x1c\xaf\x20\xff\x56\x79\x1f\xf6\xc5\x9e\x89\xc4\xb9\x66\x7e\x8c\x7c\x5d\x04\x2e\x00\xab\xc0\x19\xe0\x25\xe0\x45\xe0\x79\xe0\x28\xf0\x0c\xf0\x24\x70\x04\x98\x07\x0e\x00\x2d\x60\x16\xfb\x9b\x20\x67\x82\x7c\x8e\x49\x39\x15\xc8\x0b\x44\xf4\xdc\x81\x30\x7f\x84\xec\x95\xb0\x4f\x56\xd8\x4f\x11\x87\xb8\x96\x0f\xf4\xa0\x7c\x70\xc3\x7c\x58\x6a\xca\x07\xef\x06\xc7\xbd\x2f\x76\x70\x57\xc6\x49\xed\xf7\xff\x1e\xaf\xec\x0e\xc5\x2b\x43\xbb\x39\xaf\xc2\xf8\x64\xd0\xbe\x55\x9c\xac\x1d\x8a\x53\x76\xd7\xe7\x55\xd7\xb6\xf2\x6a\x60\x87\xe2\x65\xed\xfa\x78\xc5\xb7\x15\xaf\xfc\x0e\xc5\x6b\x00\xf1\xea\xdf\x55\xf1\xf2\x56\x50\xff\x99\x61\xdc\x12\xdb\x8a\xdb\xc8\x8e\xc4\x4d\xd5\x49\x37\x95\x9e\x5e\xef\x36\xd5\xb7\xb2\xde\x4d\x86\xb2\xf4\x23\xbd\xac\x9d\xcb\xab\x7e\x73\xfc\x27\x4d\xae\x5b\x27\xaf\x7f\xc7\xf1\x18\xe7\x0e\x4b\x87\xbe\xe7\x38\xa1\x2e\x0d\xea\x65\x13\xf5\x2d\xea\x3b\x55\xff\xa9\xfa\x50\xd5\x8f\xaa\xbe\xac\x99\x5c\xdf\xaa\xfa\x53\xb5\x37\xd7\x03\xeb\x6d\xea\xd5\x07\xd5\x51\xcb\xdb\xa8\xa3\x44\x5d\x63\x3b\xce\x09\xd1\xd6\x3f\x91\x0e\xf2\x4e\xd6\x47\xe7\xc6\xe4\x66\xee\x9f\x9a\xb5\x54\x1e\x0a\x7e\xa6\x3c\x01\x5e\xd4\x53\x0b\x01\x3f\x68\xd9\x55\xf1\x5e\xae\x1c\xb3\x54\x9e\xb6\xd6\x4d\x9c\xb7\x73\xc9\xce\xf5\xd2\x0c\xfc\x1e\x68\x5a\x7f\xbd\x6e\xd2\xd7\x3f\xde\xf4\x47\x71\xfa\xff\xc1\x63\x60\x3f\xc8\xd3\x0b\x71\x11\xa9\xe1\x56\x9c\x62\xc9\x1e\x2f\x96\x26\x1f\xf2\x04\x1f\xd2\x23\x72\x52\xe4\xa3\xa8\xf5\x45\x9d\x2f\xee\x02\xe2\x1e\x20\xee\x0a\xe2\x9e\x20\xee\x12\xe2\x1e\xd1\x46\xbf\x2a\xf2\xbb\x93\xfa\x6b\xa3\x67\xe9\xbe\xef\xfb\x19\xd8\x19\xf3\x63\x94\x7a\x7f\xaf\xf1\x34\xf6\x6f\x16\xfc\x06\x7a\x16\xd7\xf7\x41\x35\x48\x6c\xeb\x79\xbf\x29\xcf\xa7\x2e\x3a\xaf\xe9\x1e\x07\x5f\xd5\xf8\xbf\x89\xf9\x25\x6d\x4f\xfc\x01\x7e\x43\xe3\x2f\xa0\x9f\x3b\x89\x28\xff\x3a\x78\x6b\x4f\x94\x3f\x08\x7e\x43\xe3\xf7\x83\x3f\x93\x8c\xf2\xbf\x60\x5c\x2b\x15\xe5\x7f\x02\x5f\xd5\xf8\x41\xf4\xb3\xae\xdd\xf7\x5f\x01\x3f\xda\x1d\xe5\x8f\x80\x5f\xd5\xf8\x3f\xd1\xff\x62\x3a\xca\xff\x0e\xfe\xae\xc6\xf7\xa1\x9f\x4d\x6d\xdc\xdf\xa0\xaf\x9f\xaf\x3f\x82\x1f\x69\xb3\x86\x5d\xb2\x42\x6b\xc7\x27\x5a\xb8\x65\x99\x27\xe9\x16\xfe\x33\xc9\xef\x6d\xe1\x4f\x4b\x3e\xd9\xc2\x8f\x49\x3e\xd5\xc2\x5f\x90\x7c\xeb\x7c\x92\x92\x6f\x9d\xcf\x5d\xa0\x81\xdc\x5d\x8b\x85\xf2\x93\x44\x74\x27\x1e\x95\x37\x13\x51\xd9\x4a\x46\xe5\xd1\x54\x54\x5e\xe8\x8e\xca\x6b\xe9\xa8\x9c\x31\xa2\xf2\x7e\xcc\x47\xa8\xed\x53\xe7\x1a\x64\xf9\x29\x2c\x57\xb1\xab\x15\x92\xa7\xdb\xcc\x95\xf2\x74\xa5\x50\x70\x3d\xb7\x20\x36\x2d\xe5\x1c\x7b\x2a\x6c\x38\xec\x14\xe7\x44\x9b\xd8\xd5\xee\xe1\x40\xe9\x72\x71\xc6\x3d\x6c\x5f\xb5\xa7\x2b\x2e\xbf\x2b\x95\xd6\x3e\xc5\xc1\xb1\x75\xa7\x52\xab\x70\xd5\x76\xdc\xf2\x95\x69\x2a\x4c\x95\x4b\xf6\xb4\x6b\x4b\xbb\x9c\x7d\xa9\xf0\x8e\x53\xbc\x6c\x53\xce\xad\x38\x95\xe2\x38\xe5\x5c\xef\xb2\xc0\xb3\xa7\x4e\xe5\x0b\x2f\x31\x0c\x2b\x1c\x61\x7c\x91\xe1\x08\x70\x48\xc9\x47\x21\x1f\xa5\x9c\x73\x65\xa2\x58\x29\x8a\x4e\x87\x72\x43\xe0\x5f\x40\x2f\x0a\x9f\x87\x19\x00\x38\xa4\xe4\x61\xa8\x0d\x81\x07\x0e\xe7\x5b\x52\x64\x5b\x4f\x9d\xa8\xed\xae\x18\xd9\xc7\x58\xd2\xf6\x9d\xfe\xed\xd3\xc0\x9f\x76\xec\xe0\x1b\x68\xeb\xa3\x97\x04\xb3\x5b\xd8\x6f\x68\x5b\x50\xdf\x49\xef\x11\x51\x77\x9b\x71\x16\x1f\x63\x5c\x80\xdc\x03\x3f\x95\xbd\xfa\x5d\xb0\x3a\x8c\x9f\x57\x5b\x3c\xf6\xe0\xf1\xf7\x77\x18\x3f\xb5\x2f\x3a\x4e\x0f\xea\x5d\x7d\xfc\x97\x31\xbe\xbe\x06\xf9\x47\x19\xf5\xef\xab\x7a\xfc\xde\xe8\x60\x7f\xa6\xe7\xdf\xd9\x27\x50\x77\x0f\x6b\xfc\xc5\x5e\xc6\xf3\x1a\x1f\xfc\x9e\x02\x57\x3a\x8c\xbf\xd6\xdb\x7e\x3c\x3d\x7f\x96\x3a\xd8\xff\xd0\xc1\x5e\x97\xbf\x81\xbd\x7e\xdc\xaf\xc3\x5e\xcf\x43\x7d\xfd\xbe\xec\xb0\x7e\x59\xac\x9f\x05\x59\x84\xf3\x91\x36\xeb\xd7\xe8\x54\x2e\x40\x61\xb1\xe9\x9c\xee\x6b\xb2\x57\xf5\xc7\x3f\x01\x00\x00\xff\xff\xfe\x07\x69\x08\x60\x18\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 6240, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

