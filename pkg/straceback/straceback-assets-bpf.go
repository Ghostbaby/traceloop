// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x3b\x6f\x13\x41\x10\xc7\xff\x67\xc7\xc4\x79\x80\x83\x44\x90\x25\x52\xa4\xa4\x40\x8e\x49\x45\x99\xb3\xb8\x84\x08\x27\x58\x8e\x83\x02\xcd\x6a\x63\x0e\xb0\xf0\x4b\x77\x07\x24\x3c\x04\x12\x8a\x84\xe8\x28\xa8\x41\x88\x8f\x80\x04\x54\xa1\x00\x89\x06\x44\x81\x50\x44\x45\x41\x49\x41\x81\x44\x0a\x84\xd1\xed\xcd\x61\x67\xee\x0e\x5b\x34\x2e\xc8\x48\xc9\x66\x7e\x3b\xb3\xb3\x37\x3b\x3b\xd9\x5b\x46\x7e\x36\xa6\x69\xf0\x45\xc3\x0f\xb4\xb5\xb6\x6c\x0d\xb5\xff\x9e\xa1\xdf\xfb\xa1\x61\xf3\xa0\xc7\x36\x00\x14\x00\x5c\x1f\xde\x6e\xb9\xfa\xe6\x63\x8f\x0f\xc6\x80\xed\x56\xab\x95\x66\x8b\x6e\xa8\x58\xc0\x38\x12\x4a\x97\x71\x8f\x6f\x4a\x6f\x4c\xc7\x82\xf6\xa3\x00\x9e\x91\xfe\x80\xc6\x7e\xc7\xbf\xbd\xd3\xec\x5b\xcb\x93\xd4\x2f\x1a\x09\xa4\x52\x64\xe0\xc6\x4c\x02\x18\x08\xfa\xfe\xd7\x12\xa7\x9c\xec\xe6\x65\xa7\xec\xe6\x25\x5c\xfc\x7b\x94\x05\x25\x07\x80\x7b\x65\x6d\xc7\x92\x65\x73\x55\x96\x2f\xf5\x79\x83\x7d\x92\xb9\x42\x1e\x6e\xef\x19\x23\x5d\xbb\x56\x44\xf2\xc6\x88\x76\x08\x80\xcb\xd2\xc4\xfd\x5a\x3a\x00\xe0\x08\x63\x7f\x93\x7b\xaa\x8f\xc6\xd1\x64\xfc\x8e\xe2\x89\x00\xf7\xac\xe3\xa1\x6b\xc5\xa9\xf7\x76\x8a\xd4\xdc\x7d\x0e\x06\xf8\x4f\x78\x3c\xc9\xf8\x31\xb2\x9f\x64\x7c\x9c\xf8\x61\xc6\xeb\xc4\xc7\x18\x3f\x4d\x3c\xcd\xf8\x5b\x15\x77\x34\xb0\x9f\x57\x8a\xef\x0d\xf0\x17\x8a\xf3\x5d\x02\x67\x15\x1f\x09\xf0\x27\x8a\x0f\x05\xf8\xac\xe2\xc3\x01\x5e\x56\x3c\x98\xcf\x41\xc5\x83\xf9\xf4\xbf\xdf\x3d\x1e\x77\xb7\x2b\x1d\x7a\xaa\xcb\xbc\x9b\xa3\x09\xd2\x87\xa9\x17\x65\x3b\x74\x75\xed\x32\x8e\xb9\xe6\x40\xdd\xba\x66\xa3\x52\x77\x84\xb0\xd7\x6d\x61\xae\x55\x1c\x64\x2c\xb3\xda\x9e\x98\xb2\xe4\x55\x77\xae\x2c\xab\x55\x7b\xea\x8f\x51\x4d\x36\xed\x29\x47\x56\xaa\xc2\x9d\xe8\x60\xbe\x69\x70\xed\xba\x63\x5a\xdd\x17\x57\x56\x7c\xf5\x36\x2c\x5f\xb0\x1a\x97\x9b\xa2\x26\x9b\x10\x57\x4c\xcb\xae\x34\xea\x10\xd5\x4a\xd9\xac\xdb\xa6\x5a\x3c\x63\x5e\x14\xe7\x2d\x59\x33\x91\xb1\x1d\xcb\x91\xab\xc8\xd8\xeb\x35\x35\x5a\x8d\x73\xd2\x91\x28\xe8\x45\x7d\x41\x14\x8a\xa7\x72\x86\xd0\x4b\xc2\x58\x99\x2f\x89\x05\x7d\xe9\x24\x96\x97\x0c\xa1\x17\xe7\xc4\xfc\xe2\x71\x63\x45\xe8\x4b\xc2\xb3\xcc\x1b\x8b\x73\xa5\x13\x3d\x98\xa8\xd9\xa2\x51\x0a\xe5\x8b\xcb\xf9\xbc\xc8\x9d\x29\x19\x3e\xcc\xe7\x72\x47\xc5\xb4\x3b\x64\xc5\x74\xa0\x00\xfe\x51\xbe\xd0\x79\x73\x99\xa1\xd2\xbe\xcf\xde\x53\xfc\xcd\xa8\xd1\xcf\x1e\xee\x1f\x11\x6f\x80\xe9\x37\xbb\xf8\xf3\x5e\xc5\x6f\xdc\x3a\x10\x72\xab\x80\xcf\xd4\x5a\xfc\x7e\x31\x46\xdf\x99\xec\xd0\xfd\xf9\xb0\xf8\x2f\x7b\x8c\x3f\x11\x11\xdf\x37\xec\x8c\x9f\x08\x89\xff\x9d\xe2\xb3\x67\x28\x66\x28\xd1\xd9\x2e\xf1\x9f\x92\x3f\x3f\xc3\x26\xf9\xf3\xf7\x30\xcf\xff\xc3\x08\xff\xbb\xb1\xde\xfc\xf5\x08\xff\x47\xf1\xde\xfc\x97\x23\xfc\x9f\x0f\xf4\xe6\xff\x2e\xc2\xff\x7d\x22\xdc\x9e\xd7\xef\xeb\x08\xff\x0f\x11\xfe\x5c\xff\x14\x71\x7e\x5b\xe4\xcf\xef\x01\x3f\xbf\x8f\x11\xf5\x33\x19\x52\x3f\xfb\x42\xea\xe7\x6b\x48\x6c\x57\xd2\x54\xd0\x6f\xe8\x83\x35\x56\x7f\xfe\xff\xbf\xdf\x01\x00\x00\xff\xff\x6e\x9b\x5a\x47\x18\x0e\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3608, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\x6f\x6c\x9b\x57\xf5\xc7\xef\xe3\xc4\xb5\xeb\x75\xb1\x9b\xfd\xda\x9f\x6b\xd8\xe4\x6e\x64\x84\x87\x36\xb5\x9d\x38\x71\x23\x15\x25\x1d\x69\xd3\x2e\xcd\xa2\x34\x65\xa6\x52\x71\xdc\xc4\x6b\x4c\xdd\xd4\xb3\x9d\x2e\x8e\x11\x2b\xed\x86\x4a\x41\x28\x13\x02\x95\xf2\x82\xfe\x99\x44\x2a\x24\x16\xc4\x8b\x04\xf1\xc2\x41\x20\x11\x09\x09\x22\x21\x41\x24\x24\xb0\x84\x04\x95\x78\x81\x25\x5e\x2c\x12\xa8\x0f\xba\xf7\x7e\xaf\xed\xe7\xd8\x56\x53\x81\xd4\x64\xc9\x23\x8d\xe3\xf3\xb9\xff\xce\x3d\xf7\xdc\xe3\xc7\xa7\xe1\xed\xbe\x81\x63\x16\x4d\x63\xea\xd1\xd8\x87\xac\xac\x95\x9f\xe9\xae\xf2\xe7\x1e\xfc\xef\x6e\xa6\xb1\xfc\x5e\xc9\xde\x65\x8c\xd9\x19\x63\x79\x7b\x59\x6f\xe2\xfa\x4e\xa9\xe7\x6e\xaf\x19\x8a\x5b\x19\x63\xd9\xa8\xec\x98\xf3\x14\x05\xcf\x39\x66\x85\x5c\xb0\xa1\xff\xcc\x2d\xa1\x5f\x9c\xb9\x23\xe5\xcd\x7b\x42\x8e\x79\xde\x97\xfd\x6f\xcf\x49\x39\xf3\x10\xb2\x00\xb9\x0a\xb9\x02\xb9\x0c\xb9\x04\xb9\x08\x39\x0f\x79\x03\xf2\x2a\xe4\x34\x64\x12\x72\x02\x72\x14\x76\xce\x3d\x92\x32\x2c\xf4\xfc\x3d\x69\xaf\xcd\xc2\x58\xd1\x30\x0c\x37\x71\xde\xbb\xc2\xa7\x65\xbf\xec\xb1\x87\x2c\x62\xdc\x5d\x8c\xd3\x18\x9b\x37\x0c\x63\xc1\xc2\x98\x0b\xfd\x5d\xc2\x3f\x2e\xd1\x1e\xbf\x2f\xf7\x9f\xf3\xc0\x7e\x8f\xb4\x23\x7b\x55\x8e\xcf\x46\xdd\xf0\x23\xf6\xe9\x91\xf6\x66\xdf\xb1\xa3\xdd\x8b\x76\xf8\xc3\x23\xf7\x95\xbd\xe6\x42\x7b\x2b\xda\xe1\x37\x8f\xdc\xff\x82\x26\xed\x5e\xb0\x4a\x79\x2e\x29\x37\xc6\x75\xfe\x38\x83\x58\xff\xba\x5c\x3f\x3b\xea\x93\xf3\x38\x70\x0e\x0e\xe9\xcf\x05\xec\xff\x5c\x06\xe3\xe1\x17\xe7\x10\xc6\xbf\x23\xed\xcb\xc6\x42\x72\xfc\x59\x9c\xe7\x59\x79\x2e\xa5\xf5\x53\x64\x7d\xc8\xd2\xfc\xe9\xda\xf3\x73\xbf\x9a\xd6\xb7\xa0\xdd\xa2\xec\x97\xfb\x2f\x8d\xc7\xf9\x39\xf7\x4b\x79\xd1\x23\xfd\x9f\x7f\x1f\xe7\xd5\xc8\xd8\xac\x61\x18\xf9\xa8\xd4\xdd\x16\xf3\x79\xbb\x1b\x18\x33\x0c\xc3\x50\x3a\xb7\x77\x14\xe7\xba\x8f\xb7\x6b\x8c\x79\x63\xa9\x14\x6f\x3b\xd2\x32\xee\xc8\x79\x56\x44\x3c\x71\x3e\xe5\x1d\x1c\xe6\x9f\xbd\x2d\x89\xa9\x9c\x67\xb9\xc4\xbd\xc9\xf8\x38\x78\x22\xe7\x59\x2a\xf1\x03\xde\xd8\x24\xff\x9c\x89\xa5\xba\x73\x9e\xc5\x12\xcf\x44\xe3\x09\xfe\x79\x2c\xca\xfb\xcf\x0b\x9e\x9e\x59\x15\x32\x3b\x2e\xe3\x22\x7a\xff\xdf\x46\x55\x1c\x3e\x92\x71\xf8\x29\xce\xe1\x5f\x6e\xf7\x0e\x12\xe7\x6b\x7c\xff\xf7\xa1\x37\x30\x16\xae\x11\xf7\x0b\x8d\xe5\xf1\xdc\x45\xf9\x07\xe8\xbf\x93\xb1\x95\x47\x86\x91\xbd\x26\xf5\x3d\x96\x01\xa6\xec\x56\x7e\x33\x0c\xc3\x79\xb0\xf9\x44\x89\x3f\xaa\xe0\xcf\x37\x1f\x33\x9d\x53\xce\x33\x84\xb8\xed\x87\xec\x81\x0c\x41\xfa\x20\x5b\x21\xbd\x90\x6e\x48\x17\xa4\x1d\x92\x41\xae\xc9\x7b\xee\x29\x42\x3e\x84\x2c\x40\xae\x42\xae\x40\xca\xf3\xca\xde\x47\x7e\xe8\x96\x7e\x5f\x68\x90\xfb\xcf\x75\x2f\xa2\x9f\x3c\xbf\x34\xec\xae\x8c\x17\xb1\xbf\xc0\xde\xd2\xbe\x8b\x95\xfe\xd8\xdf\x24\x78\xfe\x93\x72\xdf\xaf\xdb\x18\x73\x22\x9e\x79\x2a\x68\xb1\x39\x44\x5e\xa5\xe7\x54\x2f\x1f\xa9\x7b\xb0\x87\x35\x08\x79\xc1\xc6\xc4\x27\x67\x52\xf2\xac\xc5\x5e\xf2\x33\x9f\xff\xe0\xfe\xf2\xfd\xe1\x7a\xfe\x25\xd9\xcf\xca\xe4\x44\x69\xcf\x6b\x86\x6a\x7f\x5b\xec\x17\xfe\x18\x93\x79\x26\xff\x5e\x79\x7d\x1e\x1a\x17\x78\x3c\x33\xc6\xde\x82\xdc\x83\x79\x54\xde\x51\xfe\xa9\xbc\x77\x3c\x3e\x9f\xe4\xde\xcd\x55\xdc\xbb\xec\x35\x3b\xe2\xed\x54\x9d\x78\x3b\x59\x27\xde\x8e\x6f\xba\x78\xd3\x84\xbe\x54\x33\xfe\xb6\x4e\xdc\xb9\x37\x48\xdc\xb9\x10\x77\x5b\x25\xcf\x2d\x81\x6f\xb5\x78\xf3\x6e\x90\x78\x73\x23\xde\x3e\xfa\x79\xae\x61\x3b\xcf\xb1\xec\x58\xeb\x06\x89\x3b\xef\x96\x89\xbb\xc6\xed\xb8\x63\xd9\x31\xdf\x06\x89\xbb\xd6\x2d\x13\x77\xd6\xed\xb8\x63\xd9\xb1\xd0\x86\x88\x3b\x55\x67\xf8\x36\x64\x55\x1d\xcc\x56\xd6\x9b\x2a\xea\x3f\xb9\x9b\xeb\xac\x83\xa1\x6e\x91\xd3\x6f\x95\x74\xfe\x5c\xd4\x51\x0f\x9b\x21\xf5\xb0\x9b\xa8\x87\xe9\xa8\x9f\xe8\xa8\xc3\xe8\xa8\xeb\xe8\xa8\xff\xe8\xa8\x13\xe9\xa8\x27\xe9\xa8\x87\xe9\xb2\x1e\xa6\xea\x4e\xaa\xde\xb4\xee\xfa\x16\xf6\xbb\xc7\xf6\x69\xe9\x8f\x8a\xdf\xfb\xf3\x86\x61\xac\x37\x8e\x94\x9f\xce\xd8\x3f\x61\x3a\x67\x5a\x1f\xfb\x5f\xd6\x63\x62\xa9\xd4\x11\xde\xd6\x32\xee\x28\xdd\x5b\x51\x77\x19\x1c\x16\x5f\x6a\x2d\x89\x29\xaf\xba\xc7\x9c\x27\xe3\xe3\xe0\x89\x29\x75\xaf\x51\x8f\x99\xe6\x9f\xe3\x99\x6e\xaf\xba\xe7\xd5\xf5\x98\xc2\x63\xeb\x30\x05\xd4\x61\x5a\x6b\xd4\x61\xaa\xe2\xae\x62\x1c\xdf\xa8\xca\x27\xf9\xaf\x94\xb9\xbd\x32\xaf\xbc\x59\xd3\x4f\x2e\xf5\x3b\x44\xc5\x59\x4e\x47\x3d\x54\x47\x3d\x54\x47\x3d\x54\x47\x3d\x54\x47\x3d\x54\x0f\x43\x22\x7f\xea\xc8\x9f\x3a\xf2\xa7\x8e\xfc\xa9\x23\x7f\xea\xc8\x9f\x3a\xf2\xa7\x8e\xfc\xa9\x23\x7f\xea\xc8\x9f\x3a\xf2\xa7\x2e\xfd\x9e\xbd\x0e\xbb\xba\x0b\x24\xff\x21\x9f\xea\xf2\x1c\xd2\xb0\x5b\xe5\x15\x77\xa3\x39\x1f\xe6\x9f\x93\xf3\x44\x5e\x91\xf2\xf9\x57\xfe\xbf\xe4\x8f\xca\xef\x87\x73\x2f\x49\xc7\xab\xfa\x85\xfa\x9e\xb8\xf4\xdc\x2e\xa6\xd6\x67\xe2\x0e\x3b\x4a\xe3\x4d\xf9\x35\x60\x2b\xf5\xe3\x76\xbc\xae\xc9\xfc\xda\xa2\x35\x8a\x7b\x7f\x41\x93\xf9\x31\x7b\x4f\x9e\x8b\xb3\x59\xce\x97\x45\x1e\x2c\xe5\x49\xbf\x66\x9a\x27\x1f\xc0\xb9\x77\xc0\x1f\x27\xe1\x9f\xbb\x38\x5f\xec\x2f\x7b\x57\xc6\xc1\xfa\xf3\xe3\xd5\xaa\xfc\x58\xf8\x6f\xbe\x97\xdf\x94\xf1\x4d\xfd\x7f\xb0\x57\x83\xdf\x8e\x6f\xba\x78\x93\x75\x95\x62\xcd\xf8\xa3\x71\xf7\x91\x8d\xb3\xeb\xae\x0d\x11\x5f\xb9\xdb\x2b\xc8\x67\xd2\x1e\xf7\x4e\xd3\x70\xd7\xc1\x7d\xfd\x9b\x2e\xbe\x2c\x15\xf1\x55\x2f\xae\xb6\x4c\x3e\x53\xff\xae\xf4\xd4\xf3\x98\xb4\xe3\xe0\xbe\xcd\xf7\xfd\xd8\xf0\x04\xf9\x6a\xeb\xc4\x95\x77\x83\xc4\x95\xb4\xa3\x3a\x6f\x6d\xbe\x38\x6b\xdc\x8e\xb3\x1a\x71\xd6\xba\x41\xe2\x4c\xda\xb1\x19\xe3\xca\xba\x1d\x57\x35\xe2\xca\xb7\x21\xe2\x6a\x3d\xbf\xe7\xc5\xbe\x1f\xc8\xf7\x34\x2b\xdb\x21\xe4\x55\x73\x37\xee\x4a\xfe\x38\x1f\x41\x02\x38\x9d\xe8\xd0\x58\xf1\x1f\x6b\x64\xdb\x0f\x1e\x0d\x75\x26\x11\x0d\xf0\x0b\x3f\xc2\x74\x26\x15\x1d\x8b\x9d\x8f\x8e\x5d\x7c\xca\x06\x3e\xa5\x47\xf9\x25\x54\x1d\x6b\xdb\x0f\x93\xb5\xa8\xb1\x68\x22\x71\xc0\x1b\x9b\xcc\xc4\x52\xdd\xde\x64\x7c\xdc\xdb\x92\x48\x4c\x79\x07\x87\xbd\x2d\x89\x29\x6f\x2c\x95\x3a\xd2\x32\xee\xa8\xd1\x7f\x3a\x9e\xa9\xdf\xfd\xf8\xd0\x80\xc8\xab\x2e\x8c\xd3\x66\x86\x99\xfd\x4b\xcf\x68\x1f\x43\xbd\xce\x0d\x6e\x47\x5e\xfe\x3f\xc6\xd8\x01\xb0\xd6\xdd\x8f\xb7\xdb\x10\x79\xb8\x81\x4d\x34\x9b\xf9\x77\xc0\xe7\x09\xff\x1c\xf8\x1a\xe1\xbf\x05\x5f\x24\xf9\x6e\x10\x7c\x95\xf0\x5f\x81\x17\xac\x66\x7e\x4c\xcd\x4f\x78\xd1\x22\xb9\x7d\x87\x99\xff\x18\xdc\x4d\x78\x00\x7c\x94\xf0\x7f\x6a\x92\xcf\x11\x6e\x53\xeb\x92\x7c\x7b\x1e\xf3\x84\xed\x66\xfe\x17\xcc\x93\x24\xfc\x7b\xe0\x57\x09\xff\x10\xf3\xcf\x12\xfe\x65\xe5\x1f\xc2\x3b\xc1\xbd\xe6\xf7\x58\x76\x0d\xf6\x84\x88\x3f\x17\xd0\x7f\xd9\x61\xe6\x2f\x2b\x3f\x13\xfe\x10\xf3\x14\x09\xbf\x0b\xce\x9e\x31\xf3\x17\xc1\xfb\x09\xff\x23\xf6\x3b\x4b\xf8\x49\xf4\xef\x79\xd6\xcc\x7f\x87\xfe\x61\xc2\xbf\x0e\x3e\x41\x78\x03\xe6\x99\x26\xfb\xfd\x33\xf6\x35\x4d\xfa\x4f\x82\x2f\x11\xfe\x02\xb8\xbd\xc9\xcc\xbf\xaf\xe2\xd6\x69\xe6\x4d\xe0\x2b\x84\xaf\xc0\x9e\x02\xe1\xef\x29\x7f\x12\xde\xac\xce\xcb\x65\xe6\xbf\x50\x71\x42\x78\x06\xfc\x16\xd9\xef\x51\xcc\xe3\x23\xf7\xee\x27\xe8\xdf\x4f\x78\x4e\xf9\x99\xf0\x6f\x8a\x7d\x59\xd9\x10\xf9\xce\x5f\xb3\x48\x3e\x41\xf8\x4f\xc1\xa7\x09\xef\x06\x5f\x26\xfc\x5f\x9a\xe4\x2e\x72\x7f\x7f\x08\x1e\x22\x3c\x02\x7b\xc2\xe4\xde\x7d\x06\x7c\x82\xdc\xd3\x2f\x62\xdd\x45\xc2\xff\x8e\xf9\x57\x08\xbf\x0f\x5e\x20\x9c\xa9\xf9\x89\x9f\xf3\xe0\xad\x36\x33\xff\x2a\x78\x92\x70\x1d\xf6\xac\x90\xfb\xfb\x73\xe5\x37\x32\xff\x3f\x30\x0f\xbd\xd7\x57\xc0\x43\x84\xb7\x81\xf7\x13\xfe\x00\xf3\xcf\x12\x7e\x16\x7c\x95\xf0\x0f\xd4\xbe\xc8\x3d\x2d\x28\x3b\x09\x1f\x56\xf3\x13\xee\x01\xbf\x43\xf8\xb7\xe0\xe7\x87\x84\xff\x0d\xeb\xfa\x76\x99\xf9\x77\xd5\xfc\xe4\x9e\xfe\x5a\x9d\x17\xe1\x7f\xc0\x3c\x6b\x84\xff\x00\x9c\xde\xeb\xbd\x2a\xce\x09\x5f\xc5\xba\xb7\x08\xbf\xae\xec\x27\xf7\xf7\x0d\x75\x2e\xe4\x9e\x2e\x63\x9e\x21\xc2\xbf\x06\x3e\x4a\xb8\x03\x7c\x8e\xf0\x9f\x61\xdd\x22\xe1\x97\xc0\x6b\xbd\x9b\x37\xe0\xdf\x82\xab\xb9\xb5\x8a\xbd\xaa\xf1\xf7\x04\x5b\x15\xff\x2b\x93\x9c\x84\x2d\x7b\x11\xfd\xbd\x84\x1b\xe8\xdf\x4a\x78\x18\xfd\x89\xf9\xac\x07\xdc\x4d\xf8\x82\x98\x67\x57\x95\x3d\x3f\x12\xfc\xd9\x2a\x7e\x4e\x70\x6a\x25\x13\x33\xb8\x98\xa3\x8a\xc7\x05\xdf\x59\xc5\x53\x82\x57\xfb\xed\x05\xc1\xab\xfd\xe6\x42\x3e\xe2\x22\xc2\x54\xbe\xc0\xdf\xbc\xf3\xf7\xad\xc6\xb2\xfe\x05\xc6\xd8\x1d\xab\x59\x9f\xde\x61\xee\xef\xb6\x9b\xdb\x8b\x76\x73\xfb\x0d\x87\xb9\x7d\xf4\x19\x73\xbb\x72\x8d\x6a\x5f\x7d\xd6\xdc\x3e\xed\x34\xb7\xab\xb8\x54\xed\xc5\xdd\xe6\xf6\xe5\x66\x73\xfb\x43\x66\xde\xaf\x4f\x33\xf7\xbf\xa1\x99\xfb\x17\x1a\xcd\x7a\x8f\xcd\xac\xcf\xed\x24\xf6\xef\x32\xeb\x13\x4d\x66\x7d\x89\xd8\xcb\x88\xbd\x1f\x87\x7d\xdc\x4d\xa7\xd5\xef\x33\xe8\x23\xfc\x43\x5b\x26\x36\x9d\x61\x97\xa2\xc9\xf4\xa1\x64\xea\xf2\xf9\x58\x24\x9a\x89\xa4\xb3\xe9\x08\x7f\xbd\x66\xe2\xc7\x5b\xf2\x72\x7c\x32\x13\x29\xc3\xb6\x54\x2c\x51\x6e\x38\x94\x8a\xbe\xc5\xdb\xf8\x4b\x79\xfa\x50\xa9\x93\x98\x30\x76\x25\x36\x99\x49\xcb\xcf\xaa\x4b\xf5\x9c\xfc\xbd\xff\xf1\x93\x8a\x5e\x91\x2b\xb1\x54\x3a\x7e\x79\x92\x45\x12\xf1\xb1\xd8\x64\x3a\x26\xc6\xb5\xc5\x26\x22\x6f\xa4\xa2\x97\x62\xac\x2d\x9d\x49\x65\xa2\xe7\x59\x5b\x3a\x7b\x49\xc8\xd4\xe5\xf1\x68\x26\xca\x86\x7a\x87\x7b\x4f\x45\x86\x86\x5f\x3b\xda\x17\xe9\x1d\x89\xf4\x85\x4f\x8c\x44\x4e\xf5\x9e\x7e\x95\x9d\x39\xdd\x17\xe9\x1d\x3e\x1e\x39\x31\xf8\xd9\xbe\x70\xa4\xf7\x74\x44\xf6\x1c\xe8\x1b\x3c\x3e\xd2\xbf\x8e\x2e\xa2\x75\xb8\x6f\xa4\x26\x1f\x3c\x33\x30\x10\x39\xfa\xf9\x91\x3e\x05\x07\x8e\x1e\xf5\x47\x0e\x73\xe1\x2b\x89\xc3\x92\x76\x41\xef\x84\x1e\x84\xde\x0e\x3d\x00\xe9\x57\xe3\x42\x52\x0f\x85\xa4\x1e\x82\xde\x09\x5d\xc9\x20\x64\x3b\xda\x03\xd0\x03\xd0\xfd\xd0\xbb\x30\x5d\x17\xa6\x83\x1e\x84\x1e\x84\xde\x0e\x3d\x00\xdd\x0f\xfd\x70\x27\x96\xed\xc4\x38\xc8\x0e\xf0\x76\xe8\x81\x4e\x75\x26\xfc\xa8\xfc\x6d\x7e\xb4\x07\xb1\x7c\x10\xcb\x43\xef\x84\x1e\x84\xde\x01\x3d\x00\xdd\xaf\x38\x86\x77\x60\x38\xf4\x2e\xc8\x20\xb8\x92\x01\x70\x3f\x64\x3b\x8c\xc4\xe8\x76\x8c\x86\xae\x64\x10\xbc\x03\x7a\x07\xf4\x00\x74\x25\xfd\x4a\xfa\x54\x07\x58\x17\xc0\x7c\xd0\x3b\xa0\x77\x40\x6f\x87\xf4\x07\xd4\x78\x7c\x08\xf9\x61\x10\x64\xd0\x0f\x83\xa0\xb7\x43\x0f\x40\xfa\x55\x7f\x1f\x16\xf4\xc1\x9b\x90\x1d\xe0\x4a\xfa\x7d\xbe\xaa\x3c\xfe\xa4\xcf\x6f\xca\xa9\xde\xf4\x24\xdb\xa5\xb4\x93\xef\x63\xfa\xff\xe9\xd3\xf0\x1f\x7d\xdd\xec\xa9\xb3\x1e\xfd\x7a\xff\xc6\x63\xc6\xab\xdf\xf9\xea\xa1\xdf\x8c\x37\x18\xab\xf1\xed\xc7\xd8\x92\x5f\xca\x22\x74\x17\xf6\x69\xaf\xd0\xf9\xd3\x55\x67\xfd\x7e\xac\x4b\x6b\x0a\x74\xfd\xf6\x3a\xeb\xcf\xa3\xee\x7a\xa7\x62\x3d\x6b\x8d\xf5\xff\x84\xf5\xc9\x6b\x33\x4b\xca\x3f\x5b\x62\xf4\x84\xe9\xfa\x61\x8c\xa7\x67\x78\x07\xe3\x69\x3d\x95\xfa\x7f\xbc\xce\xf8\xc5\x96\xf5\x8d\xb7\xd5\x19\xbf\xf2\xf2\xfa\xc6\xa7\xf0\xf7\x69\x01\xc2\x8b\xf8\x7b\xc2\x30\xe1\xa5\xba\x90\xb2\xb3\xce\xfa\xfd\xad\xb5\xd7\xa3\xf1\xfb\x41\x9d\xf1\x03\x75\xc6\x53\xfd\x97\x75\xce\x6f\x08\xe3\xe9\x3d\xa0\xe7\xb7\x54\x27\x7e\x86\x70\xff\xd4\x7b\xa9\x0b\x7f\xff\x47\xe3\xe7\xf7\x35\xd6\xe6\xcf\x2c\xd6\xf7\x55\xbc\x97\x9c\xa9\x18\xaf\xde\x53\xff\x13\x00\x00\xff\xff\xfd\xfb\x08\x83\xb8\x3b\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 15288, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

