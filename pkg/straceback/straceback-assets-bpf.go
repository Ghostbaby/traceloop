// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbd\x6f\xd3\x50\x10\xff\x39\x6e\x68\xfa\xa9\x22\x01\x8a\xa0\x03\x0b\x12\x03\x4a\x4b\xff\x82\xa6\xc2\x2d\x48\x26\xaa\xd2\x46\x0a\x2c\x8f\x57\x63\x20\x22\x5f\xb2\x0d\x24\x7c\x08\x96\xee\x2c\x48\x6c\x20\xc4\xc0\x1f\x80\x84\x98\x92\xa1\x48\x2c\x30\x32\x30\x31\x30\x32\x30\x20\xd1\x01\x11\xe4\xe7\x33\x71\xdf\xb3\x49\xc4\x92\x25\x27\x25\x97\xfb\xbd\xbb\xfb\xd9\xf7\xee\x5e\xde\x43\xc3\x5c\x4f\x69\x1a\x42\xd1\xf0\x13\x7d\xab\x2f\xe5\xa9\xfe\xef\x55\xfa\x3e\x0c\x0d\x9d\x63\x01\xb6\x0b\x60\x13\xc0\xbd\xe9\xfd\x9e\x6f\x77\x5e\x04\xf8\x64\x0a\xd8\xef\xf5\x7a\x59\x29\xe9\xae\xe0\x02\x8e\x22\x2d\x6c\xae\x07\x78\x87\x07\x3a\x9b\x52\xfd\x67\x01\xbc\x21\xfb\x09\xe9\x51\xf3\x3f\x22\xdd\x23\xf9\x4d\xfa\x3b\x69\x9f\x23\x03\x60\x22\xe2\x3b\x16\x40\xa7\x9a\x8c\xeb\x72\x50\xc6\x75\x89\x97\x70\x8e\x96\x41\xc5\x01\xe0\x8f\xa8\xeb\x39\xdc\xb2\x77\xb8\x75\x73\xc4\x0f\x38\x22\xd9\xd8\x34\xe1\x9f\x39\x0b\x64\x6b\x77\x8b\xc8\xdc\x9f\xd1\x4e\x00\xf0\xb1\x2c\xe1\x61\x2f\x1d\x01\x70\x46\xc2\xfe\x25\x05\x71\x6e\xea\x68\xca\xbc\x02\x4f\x2b\x78\xe0\xad\xc7\xe6\xd2\xe9\xac\x8d\xca\x29\xcd\x7f\xce\x49\x05\xff\x85\x00\xcf\x4a\xf8\x0a\xf9\x67\x24\xfc\x38\xe1\x0b\x12\xfe\x41\xe4\x99\x55\xf2\xef\x09\x7c\x4e\xc1\xdf\x0a\x5c\xce\x0e\x5c\x16\xf8\x8c\x82\xbf\x14\xf8\x94\x82\xaf\x0b\x7c\x5a\xc1\x2d\x81\xab\xf5\x99\x14\xb8\x5a\x9f\xd3\xa4\xfd\x72\xfb\xec\xe5\x88\x3d\x37\x60\x7d\x1e\xc0\x22\xd9\xd3\x74\xb6\x2c\x47\x6c\x31\x46\x39\xcf\x6e\x79\x10\x53\xd4\x6c\x54\xea\x1e\x63\x6e\xdb\x65\x76\xab\xe2\x21\xe7\xd8\xd5\xfe\xc2\x92\xc3\xef\xf8\x6b\x16\xaf\x56\xdd\xa5\xbf\x4e\x35\xde\x74\x97\x3c\x5e\xa9\x32\x7f\x21\x82\x85\xae\x6a\xee\xba\x67\x3b\x83\x93\x0b\x2f\x39\x7b\x1f\xb4\xae\x3b\x8d\x5b\x4d\x56\xe3\x4d\xb0\xdb\xb6\xe3\x56\x1a\x75\xb0\x6a\xc5\xb2\xeb\xae\x2d\x92\xe7\xec\x1b\xec\x9a\xc3\x6b\x36\x72\xae\xe7\x78\x7c\x07\x39\xb7\x5d\x13\xda\x69\x5c\xe5\x1e\x47\x69\xcb\x60\xf9\xe2\x06\xbb\x50\x38\x67\x94\x59\x7e\x8b\x6d\xe6\x8b\xf9\x8b\xcc\x34\x0a\x1b\xdb\xe7\xc5\x6a\xd1\xd8\x8e\xc5\x0b\x25\xd3\x64\x6b\x97\xb6\x8d\x10\x34\xd7\xd6\xce\xb2\x15\x5f\x2d\xb3\x15\x65\x13\xff\x43\xbe\xd2\x7e\x29\x42\xad\x59\x92\xee\x33\xf2\x9d\x4d\xa3\xcf\x21\x09\x5f\x4d\xe0\x9b\x90\xec\x07\x03\xe2\xe5\xb3\x43\x9e\x98\x36\x10\x33\x15\xc0\x73\x1a\xf5\x93\x64\x2f\xd0\x7b\x66\x22\x76\xb8\x1e\xc7\xdf\x1d\x92\x7f\x31\x81\xbf\x1b\xc3\x9f\x8e\xe1\xff\x41\xfc\xd2\x35\x10\xab\xda\xc1\xf8\x24\xfe\xd7\x14\x2f\xef\xe1\x15\x8a\x97\xef\xa3\x72\xfd\x9f\x25\xc4\xb7\x52\xc3\xc5\xe7\x13\xe2\x1f\xeb\xc3\xc5\x97\x12\xe2\x5f\x4d\x0c\x17\xff\x31\x21\xbe\x9b\x8e\xf7\x97\xfb\xf7\x5d\x42\xfc\x5e\x42\xbc\x6c\x7f\x4e\xd8\xbf\xf7\x14\x2f\xcf\x81\xbc\x7f\x9f\x12\xfa\xe7\x4b\x4c\xff\xcc\xc7\xf4\xcf\xb7\x18\x6e\xc1\x43\x0d\xfd\x94\x5e\x58\x93\xfa\x2f\xfc\xbf\xfb\x13\x00\x00\xff\xff\x38\x71\x9a\x2b\x98\x0d\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3480, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x4d\x6c\x5b\x59\x15\x3e\xcf\x71\x12\xc7\xfd\x89\xa7\xb4\x95\x31\x65\x78\x08\x82\xcc\xa3\x93\xda\xf9\xf5\x44\xaa\x48\xab\x09\x2d\x28\x84\x90\x69\x35\x99\x91\x2a\xf7\x35\x7e\xb4\x56\xdd\xc4\xb5\x9d\x69\x5c\x23\xc8\xd0\x19\x14\x2a\x84\x32\xfc\xa9\x64\x81\xda\xe9\x08\xb5\x9b\x21\x2b\xdc\x9d\xbb\x40\x68\x36\xa0\x6e\x40\xdd\x80\xba\x01\x65\x83\xe4\x05\x12\x5d\x8c\xf2\xd0\xbd\xf7\xbb\xb6\xdf\xb1\x4d\x02\x1a\x69\x92\xe9\x5c\xa9\xfd\xde\xf9\xee\xbd\xe7\xdc\x7b\xee\x77\xcf\xb3\xad\x7c\x7f\x62\xf2\x6b\x3e\xc3\x20\xdd\x0c\xfa\x37\xd5\xad\x7a\xab\x7e\xbe\xfe\x3c\x8e\xff\x9f\x23\x83\x2a\x87\x15\xf7\x16\x11\x05\x88\xa8\x12\xa8\xdb\xfb\x85\xdd\xad\xec\xd2\xf5\xa7\xae\xe6\x3b\x89\xa8\x68\xab\x81\xa5\x48\x55\xf2\xa5\xe0\xaa\xc4\x72\x0f\xc6\xaf\xdd\x92\xf6\xe5\xb5\xdb\x0a\x6f\xbe\x23\x71\x2e\xf2\xae\x1a\x7f\xfd\x9e\xc2\xb5\x0d\xe0\x13\xe0\x63\xe0\x23\xe0\xfb\xc0\x87\xc0\x07\xc0\x75\xe0\x0a\x70\x19\xb8\x04\xcc\x02\x2f\x01\xcf\x63\x9d\xb3\x12\x2b\xef\xa8\x75\x76\xfb\x88\xaa\xae\xeb\x86\x59\xd2\xde\x92\xb9\xac\xe7\xe3\x50\x20\x29\xb1\x72\x07\xf3\x0c\xa2\x75\xd7\x75\xcb\x3e\xa2\x10\xc6\x87\x64\x5e\x42\xb2\x3f\x7d\x57\xed\xbb\x14\xc1\xba\x23\x2a\x7e\x71\x59\xcd\x2f\xda\x61\xe4\x0f\xfb\x8b\xa8\x75\x16\xdf\x0c\xa0\xdf\x44\x3f\xf2\x10\x51\xfb\x29\xfe\x20\x84\xfe\x28\xfa\x91\xaf\x88\xda\x77\xd9\x50\xeb\x2e\x77\x2a\x3c\xb7\xaa\x36\x26\x6c\xd1\x7a\x87\x11\xff\x86\x8a\x5f\x3c\x1f\x53\x7e\x82\xc8\x7f\x50\xe5\xb1\x8c\xfd\x9f\xfb\x39\xe6\x23\x2f\xbd\xd3\x98\xff\xa6\x5a\x5f\xd1\x49\xa8\xf9\xaf\xe1\x1c\x5f\x53\xe7\x51\x8b\xff\x53\x16\x1f\x58\xf3\xff\xb3\xd6\xfe\x45\x5e\x3d\xf1\x7d\xe8\xf7\xe9\xf5\xab\xfd\xd7\xe6\xe3\xfc\x7a\xa1\xf3\xcb\x11\x95\xff\xca\xbb\x38\x2f\x3f\xd1\xaa\xeb\xba\x15\x5b\xd9\x61\x9f\xf7\xbc\xc3\x1d\x44\xae\xeb\xba\xda\x16\xeb\x3d\x8f\x73\xfd\xb4\xe8\x37\x88\x4c\x27\x97\x13\x7d\xc7\xfb\x52\xc1\x52\x64\x5c\x8e\x15\xfc\xa2\x39\x35\x23\x9e\xcd\xbe\xcc\x62\x29\x92\xa8\xf1\x66\x36\x9d\x02\x9f\x29\x45\x62\x35\xfe\xa8\xe9\xcc\x8b\xe7\x82\x93\x1b\x2b\x45\xa2\x35\xbe\x60\xa7\x33\xe2\x79\xce\x16\xe3\x4d\xc9\x5f\xeb\x26\x12\x99\xce\xaf\x9d\x56\xe7\x9f\x0a\x34\xe9\xd0\x84\x0e\xbf\x2c\xf8\xbc\xe2\x2b\xc8\xb3\x58\x7f\x17\xd3\xfb\x53\x91\x87\xbb\xb0\x3b\x88\x66\x5b\xe8\xbf\xec\xaf\xcf\xf7\x35\x9c\xcf\x2f\x80\x4d\x75\xa3\xbb\x6e\xef\x6f\xb8\x37\xa5\x9b\xdb\xac\x1b\x38\xef\x92\x75\xcb\x6d\x3c\xef\xcb\x16\xea\xc7\x75\x56\x3f\x6e\xa2\x7e\x58\xd0\x9d\x05\xfd\x5a\xb8\x0f\x16\xee\x8d\x85\xfb\x65\xe1\x1e\x5a\xa8\x1f\x96\xaa\x1f\xfa\xbe\xea\x7b\xba\xed\xba\x80\xfd\x1e\xea\xfe\x8a\xca\xc7\x7d\xcc\xeb\x51\x75\x81\xe7\x7b\xab\xfa\x72\x36\xf0\x45\xe5\xe7\x6d\xe4\x9f\xd5\x95\x0f\x53\xc7\x4e\x2e\x77\x5c\xf4\xf5\xa5\x82\x54\x8a\x50\x5d\xaf\x53\x33\xf2\x52\xf7\x65\x16\xcd\x52\xe4\xe9\xa6\xe6\xb3\xe9\x14\x78\xa1\xef\x6a\x8d\x3f\x6a\x3a\x4b\xe2\x39\x5d\x18\x33\x4b\x91\x8d\x1a\xef\xd5\xf1\x13\xc9\x6b\xdd\xda\x77\x3f\x50\x79\x6e\xd0\xef\x93\x4d\xa5\xdf\x68\x0b\xdd\x72\xdd\x95\xd6\x1e\x6f\xf2\x7c\x8b\x0d\x57\xde\xa8\xfb\x0b\xa8\xba\xa9\xe2\x5e\xc5\x39\x19\x13\xd4\xa8\xab\x92\x85\xf7\x85\x85\xf7\x85\x85\xf7\x85\x85\xf7\x85\x85\xf7\x85\x35\x0b\x9c\x06\x9e\x06\x8e\x03\x13\xc0\x18\x30\x0a\x34\x81\x61\x60\x08\x18\x00\x12\x50\xe5\xb9\x78\x03\xeb\x1a\x53\xf9\x2a\x77\xa8\x7b\x57\x1a\x53\x79\x2d\x59\x2a\xef\x79\xac\xbb\x8c\x73\x16\xfb\x59\x96\xfb\x3b\x2c\xed\xb3\x46\x17\x6d\xba\xae\x5b\xbc\xa0\x74\xad\xeb\xa2\x1e\xff\xd9\x81\xbd\x4a\x67\xa8\x93\x9d\x14\xac\xe5\x45\xe8\xfd\x85\x03\xa8\x2f\x07\x54\xff\x2b\x3e\xa2\x5e\xf8\x11\x71\xfa\x7c\x7e\x79\x8f\x2f\xfa\x88\x3a\xc4\xba\xef\xa8\x3c\xeb\xba\x5b\x7c\xae\xae\x5f\x31\xfe\x85\x03\xf5\xfa\xbc\xdc\xe0\xb7\xf2\x29\xbd\x5f\xec\x1f\x7e\x8a\xe0\xf5\x3d\x10\x3a\x10\xa5\xe8\x22\xa9\x3a\x78\x0d\x78\x88\x7c\x35\xbf\x22\x42\x3e\xb2\xdc\x54\xef\x85\xae\xfe\x97\x7b\x72\xaf\xe1\x9e\x14\xaf\x06\x76\xad\x6e\x64\x1d\x1d\xab\xb6\xd4\xd1\xc7\x56\x3f\x37\x42\x3b\x44\x37\x21\xe8\xe6\xa5\x5d\xa7\x1b\x5f\x83\x6e\x3e\xfe\x7a\x09\xef\x10\xbd\x84\xa1\x97\xdd\x57\x67\x3a\x9e\xc9\x3a\x63\xee\x10\xdd\x98\xbb\x56\x37\xfe\x67\x52\x37\xd1\x1d\xa2\x9b\xe8\xae\xd5\x4d\xe7\x33\xa9\x9b\xd8\x8e\xd0\xcd\x76\xbe\xcf\xca\x7d\xdf\x57\xdf\xcf\x3a\xe9\x4b\x12\xf1\x73\x97\xf4\x2d\xda\x26\xb0\x0a\xf4\x63\x3f\xf2\xe7\x06\x3f\x7d\xd2\xd0\x0c\xfc\xae\x22\x4f\x1f\x79\x11\x47\x96\x2f\xe4\xec\x39\xe7\x82\x3d\x77\xf9\x23\x5e\xe0\x47\xd4\x74\x5e\x12\x0d\xda\xfa\xa4\xd5\x5b\xc1\x4e\x67\xe6\xec\x4c\xe6\xa8\xe9\xcc\x17\x9c\xdc\x98\x99\x4d\xa7\xcc\xbe\x4c\x66\xd1\x9c\x9a\x31\xfb\x32\x8b\xa6\x93\xcb\x1d\xef\x4b\x05\x5b\x8c\x5f\x4a\x17\xda\x0f\x3f\x35\x3d\x29\xeb\x67\x08\xf3\x8c\xeb\x33\x14\xf8\xee\x1e\xe3\x33\xf8\x7d\x2a\x0c\x3e\x01\xad\x1e\x24\xa2\xa3\xe0\xa2\xa1\xad\xd7\xfd\x23\x59\x8f\x3a\x68\x9d\xd5\xa5\x93\xe0\x1f\x31\xfe\x20\xf8\x28\xab\x19\x5f\x00\x5f\x65\xf5\xe9\x0f\x86\xe2\x63\xcc\xcf\x35\xf0\x59\xc6\x27\xc0\xaf\x32\x3e\x2d\xed\x4e\x32\x59\xdc\xbd\xe0\x13\x8c\xff\xbb\xa1\xf8\xd3\x8c\xff\x25\xf8\x5b\x8c\x5f\x00\xff\x84\xf1\xdf\x80\xff\x59\xb6\xaf\x31\xf0\xa1\x2e\x2f\xff\x1e\xfc\x9c\x67\xfc\x45\xf0\x4b\x8c\xff\x16\xf8\x15\xc6\x1f\x81\xff\x4b\x2c\x0f\x6f\x80\x7f\xc4\xc6\xdb\xe0\xc3\xdd\x5e\xfe\x27\xf0\x3f\x1e\xf0\xf2\xff\xd4\xeb\x61\xfe\xef\xc0\xcf\x2a\x1b\xff\x2a\xf8\x7b\x8c\x1f\x00\xff\x80\xf1\x7f\x85\x7f\xea\xf1\xf2\xbf\xd1\xe7\xc2\xf8\x22\xfc\x2c\x05\xbd\xbc\x1f\xfc\xfb\x8c\xff\xb5\x3e\x2f\xc6\xff\x10\x7c\x95\xf1\xa7\xc0\x27\xf6\x78\xf9\x5f\xc1\xff\x32\xe3\xff\x8c\xf1\xeb\x7b\xbd\x7c\x52\xef\x6b\x9f\x97\x7f\x5b\xe7\x9f\xf1\x57\xc1\x47\x19\x6f\x81\xcf\x32\xfe\x03\xf8\x7f\xc0\xf8\xaf\x82\xdf\xd8\xef\xe5\xbf\xad\xf5\xdf\xeb\xe5\xff\x85\xf1\xd3\x8c\xff\xa3\xd6\x27\xe3\xbf\x07\xfe\x1e\xe3\x5f\xd1\xf9\x64\x7c\x1c\xfc\xa3\x0e\x6a\x6a\x1d\xd4\x82\x94\x7c\x67\x13\xd7\x6b\x88\x3a\xd6\xdd\xc4\xff\x83\x14\x1f\x66\xfc\x11\x8c\x67\x72\x23\x3f\x78\x5e\xf2\xca\xd2\xcf\xde\x26\xff\xef\x49\x7e\x5f\x13\x7f\x4e\xf2\xdc\x3b\x49\x0f\x21\x0a\x36\xf1\x69\xc9\xf7\x34\xf1\x39\xc9\x37\xe7\xe1\x79\xc9\x37\xe7\x21\x80\xfa\x22\xe0\x45\x22\x7a\xea\xab\xdb\xa3\xa2\xdf\x5f\xb7\xc5\x3b\x78\x83\xbc\xe3\x63\x86\xb7\x7f\xc5\xf0\xce\x5f\xf7\x7b\xed\x8d\x2e\xaf\x1d\xee\xf1\xda\xd3\x7b\xbc\xf6\xca\x3e\xaf\xfd\xb0\xd7\x6b\xeb\xc4\xeb\xf8\x47\xb0\x3e\x91\xb1\x63\xfa\xf3\x14\x6c\xf9\xdc\x5f\x70\x96\x0a\x74\xc5\xce\xe6\x8f\x65\x73\x0b\x17\x9c\xa4\x5d\x48\xe6\x8b\xf9\xa4\x78\x1d\x92\xfc\xb0\x95\x5d\x48\xcf\x17\x92\x75\xb2\x3f\xe7\x64\xea\x1d\xc7\x72\xf6\x35\xd1\x27\x5e\xa2\xf9\x63\xb5\x41\xd2\xa1\xf3\xba\x33\x5f\xc8\xab\x67\x3d\xa4\xd9\xa7\x78\x4f\x6f\xed\x54\x8e\x4a\xbe\xee\xe4\xf2\xe9\x85\x79\x4a\x66\xd2\x73\xce\x7c\xde\x91\xf3\xfa\x9d\x4b\xc9\xef\xe4\xec\x2b\x0e\xf5\xe7\x0b\xb9\x82\x7d\x81\xfa\xf3\xc5\x2b\x12\x73\x0b\x29\xbb\x60\xd3\xd9\x97\x27\x92\x27\x66\x4e\x25\xbf\x3e\xf5\xd2\xc4\x6c\xf2\xc4\xcb\xc9\xe9\x13\x33\x27\xbe\x99\x9c\x9c\x98\x3a\x75\xe6\xb4\xec\x9d\x99\x38\xd3\x92\x9f\x3a\x3b\x39\x99\x3c\xf9\xea\x99\x09\x4d\x4e\x9e\x3c\x19\x4f\xbe\x28\x20\xa6\x20\x9e\x1c\x05\x0e\x03\x07\x80\x89\x84\xc2\x11\xe0\x00\x30\x9e\x50\xd3\x47\x31\x0c\x38\x0c\x1c\x04\xc6\x35\x3f\xa2\x70\x08\x38\x30\xa2\xf7\x25\xb6\x1b\xef\x8f\x8f\x28\x77\xc3\x70\x07\x1c\x01\x0e\x01\xe3\xda\xc6\x30\xe0\x28\x70\x18\x18\x1f\x52\xde\xe2\xb0\x07\x95\x39\x88\xd1\xc0\x21\xe0\x00\xba\xe3\xda\x86\x73\xe0\x10\x70\x10\x18\x07\x8e\xc6\x11\x14\x38\x18\x87\x1b\xd8\xa3\x31\xec\x01\x38\x14\x6b\xba\xa8\xff\x67\xfb\x13\xbe\xa7\xf1\x36\xfe\x39\x85\xf7\xd9\x7b\x98\xff\x2d\x89\x81\x7f\x5d\x7c\x7e\x9b\x78\xfc\x2b\xdd\x8f\xb7\x98\xcf\x3f\x3f\xf1\x0a\xb8\x42\x4d\xaf\x72\xd9\xa6\x9f\x57\xa8\x13\x15\xc2\x3e\x03\x0d\x36\xa1\x46\xb4\x8a\xbf\x84\xb8\xfc\xb3\x2a\x8f\x3f\xd8\x26\xfe\x32\xe2\xdf\x6e\x88\xd7\xd9\x22\xfe\xdf\x10\x9f\xa5\x99\x6e\x1f\x54\x68\xd2\x7f\x8f\x3f\x8b\xf9\xfc\x0c\x1f\x62\x3e\xff\x5e\xce\xf3\x9f\x6a\x33\xff\xf1\xa1\xed\xcd\xef\x6e\x33\xbf\x7a\x78\x7b\xf3\x7f\x87\xdf\x27\x06\x18\x1f\xc2\x0b\x76\x96\xf3\x40\xed\xf6\x41\x9b\xf8\x97\xc2\xad\xe3\x71\xfd\xfe\xb6\xcd\xfc\x4c\x9b\xf9\xdc\xfe\x7d\x9b\xf3\xcb\x62\x3e\xbf\x07\xfc\xfc\x1e\xb6\xd1\x8f\x89\xfb\xa7\xcf\x3f\x84\xbf\xa3\xe0\xfa\xf9\x4b\x8b\xd8\xa2\xad\x23\xfe\x6d\xbc\xd2\xc5\x1a\xe3\x0d\xf3\xf5\xe7\x97\xff\x04\x00\x00\xff\xff\xca\x61\x7d\x24\x30\x26\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 9776, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

