// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x40\x14\xfe\x1c\x37\x24\x4d\x8b\xe8\x00\x28\x12\x1d\x32\x32\xa0\x24\x74\x62\x0c\x95\x28\x4b\x86\x0a\x09\xa9\x62\x31\x57\xeb\x80\x88\xfc\xb0\x6c\x03\x0d\x3f\x44\x97\x4a\xfd\x07\x98\x41\xa8\x03\x7f\x00\x12\x62\x0a\x03\x8c\x30\x32\x30\x33\x30\x30\x22\x51\x09\x09\xa3\xbb\x3c\xe3\xf0\xce\x47\x22\x96\x0c\xf4\x93\xe2\xcb\xfb\xee\x7d\xef\x9d\xdf\xbd\xb3\xfd\xf8\x52\x7b\xa3\xe0\x38\x48\xe1\xe0\x3b\x32\x2b\xc3\x7e\x39\xfb\xdf\xa2\xeb\x0a\x1c\x8c\x4e\x8f\xb9\x3d\x00\x9b\x00\x1e\x54\x0e\x13\x65\x8f\x9e\x8f\xf9\x52\x01\x38\x4c\x92\xa4\xca\x82\xee\xe9\x5c\xc0\x29\x14\xb5\x2d\xdc\x31\x3f\x12\xe3\xb1\x5a\x30\xfd\x97\x01\xbc\x22\xfb\x09\x8d\xf3\xce\xaf\x62\xa8\xd2\x2c\x00\xd8\xcd\xa9\xdb\xff\x0a\x97\x6a\x72\x54\x97\x3f\x71\x54\x97\x7c\xa4\xe7\xa8\x09\x2a\x0e\x00\x75\x04\xa3\x38\x14\xbe\xdc\x16\xfe\xed\x39\x2f\x70\x4e\xb8\xbc\xd9\xc6\xcf\x24\x49\x56\xc8\x76\xee\x5f\x41\xf9\xe1\x92\x73\x06\x80\xe2\xaa\xc4\xa7\xbd\x74\x12\xc0\x39\xc6\xfd\x0d\x3f\xf4\xd5\x45\xc0\xf8\x6f\xfa\x5a\x34\xf8\xb1\xb7\x9b\x1b\xcb\xa5\x67\xe9\x24\xde\xeb\x75\x2e\x19\xfc\x5b\xcd\x2f\x1b\xfc\x6b\xcd\x97\x0c\xfe\x9a\xe6\x2b\x06\x7f\xa0\xf9\xb2\xc1\x6f\x68\x7e\xd1\xe0\x7d\xcd\x9b\xeb\x2f\x69\xde\x5c\xff\x59\x1a\x1d\xf2\xd9\x9a\xb0\x17\xa7\xcc\xab\xd5\xae\x92\x5d\xa1\xb3\xdf\x9c\xb0\x75\x9b\xd7\x63\xb9\x13\x43\x77\x79\x30\xe8\xf4\x63\xcf\x8b\x86\x91\x27\x77\x3a\x31\xea\xa1\xec\x66\x13\x8d\x50\xdc\x53\x73\xbe\xe8\x76\xa3\xc6\x6f\xa7\x9e\x08\xa2\x46\x2c\x3a\x5d\x4f\x4d\x4c\x70\xa9\xab\x19\xbb\x1f\xcb\x70\x7a\x70\xed\xc5\xa3\x67\xa4\x7f\x33\x1c\xdc\x09\xbc\x9e\x08\xe0\xdd\x95\x61\xd4\x19\xf4\xe1\x75\x3b\xbe\xec\x47\x52\x07\xaf\xcb\x5b\xde\x8d\x50\xf4\x24\xea\x51\x1c\xc6\x62\x1b\xf5\x68\xd8\x53\x63\x7b\x7d\xfd\xbc\xb7\xa6\x86\xa6\xb7\x66\x54\xfc\xdf\xf0\x99\xea\xcb\xb1\x4b\xad\x54\x60\xef\x7f\xfe\x8d\xe3\xd0\xef\x18\xe3\x5b\x96\x7c\x0b\xcc\x7e\x34\x45\xcf\xcf\x22\xef\xd8\x21\xf5\x13\x47\x8d\xd6\x5f\x23\xfb\x04\xdd\x67\xaa\x4f\x9f\x0b\x35\x4b\xfe\x37\x33\xe6\x5f\xb5\xe4\x6f\xe5\xe4\x2f\xe6\xe4\x7f\x49\xf9\xf9\x1e\xb4\xa8\xd0\xfc\xfb\x8b\xd7\xef\xa9\x45\xbf\x55\x98\x4d\x7f\xd1\xa2\x0f\xdc\xd9\xf4\x57\x2d\xfa\xfd\x85\xd9\xf4\x1f\x2c\xfa\x67\xc5\x7c\x7f\xde\x7f\xef\x2c\xfa\x03\x8b\x9e\xdb\x9f\x48\xcf\x3e\x5b\xf1\x82\xf4\xbc\x8f\xf9\xfe\x7f\xb4\xec\xff\xf5\x9c\xfd\x3f\x9e\xb3\xff\x5f\x73\x72\x2b\x7c\xa1\xfc\x17\xe8\x86\x1d\xd6\x3f\xe9\xfb\xeb\x57\x00\x00\x00\xff\xff\x95\x3b\xfb\x65\x88\x0c\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x41\x68\x1b\x47\x17\x7e\x92\x2d\x6b\x65\x27\x8e\x9c\xff\x6f\xab\x2a\x39\x6c\x5b\x0c\x2e\x4d\x65\xd9\x69\x53\x35\x10\x48\x03\x4d\x73\x70\x83\xf1\xc9\xd0\x83\xb2\x91\xb6\xb1\x5a\xd9\x96\x77\x65\x5b\xf2\x16\x6a\x28\x01\xe3\x93\x49\x29\x0d\x3d\xd9\xa5\xd0\xf6\x50\xf0\xcd\xbe\xc9\xb7\xfa\x54\x7c\x29\x18\x4a\xc1\x97\x42\x8e\xbe\x94\xea\x50\xbc\xe5\xcd\x7c\xab\xd5\xce\x4a\x24\x14\x4c\xc0\x74\xc0\xfe\xf6\xfb\x76\x66\xde\xe8\xcd\x9b\xf1\x27\x7f\xfe\xfe\xc4\xed\x68\x24\x42\x5e\x8b\xd0\x5f\xe4\x33\xbf\x55\x2e\xfa\xcf\x37\xf1\xfb\x02\x45\xa8\xf1\x92\xd4\x1e\x12\x91\x46\x44\x8d\x3e\x9f\x0f\x32\x4f\xf8\x3c\x46\x44\x4e\xff\xd1\x09\xf3\xfa\x82\x26\x74\x27\xdd\x74\x19\x1f\xf4\x11\xe9\x44\xb4\x0c\x74\xfa\xd7\x84\xbe\x23\xbb\x91\xb3\xbe\x21\xb8\xf3\xc9\x63\x89\xdf\x6c\x4a\x4c\xff\x20\x71\xfd\x18\xf8\x04\x78\x04\x3c\x04\x1e\x00\xf7\x81\x7b\xc0\x5d\xe0\xb6\xc0\xc6\x96\x8c\x17\x8f\x10\x6d\xbb\xae\xbb\x13\x25\x4a\x62\xfd\x49\xb1\xee\x1c\xd6\x2d\xe3\xd4\x17\xb2\xe0\x47\xe0\x23\xe0\x87\xe0\x3a\xf8\x01\x78\x0a\x7c\x1f\x3c\x09\x2e\xd7\xd3\xf8\x0e\xf1\x7b\x89\xd6\x5c\xd7\x6d\x2c\x48\x9e\x8a\x06\xf7\xa3\x51\x90\xb8\x13\x23\xaa\x60\x7d\x2f\x13\x91\xbd\x9e\x92\xf3\xcc\xa0\xdf\x92\xc4\xfa\xf7\x32\xef\xa9\x08\x91\x6e\x5a\x16\x3f\xdf\x18\x2e\xf6\x3b\xe9\xa4\xeb\xe9\x8b\xfa\xdd\x29\x7e\xd6\x87\xcb\x8b\x4e\x5a\x6b\xe9\x7a\xa5\x54\x84\x5e\x76\xd2\xd4\xd2\xaf\xe8\xe6\x1c\x3f\x57\x4d\xeb\xba\x93\x6e\xb6\xe6\xaf\x1a\xa5\x32\x3f\x17\x0c\xee\x7f\x2c\xf4\xe5\x84\xdc\xd7\x7a\x51\x6e\x68\x7b\x9e\x8f\x4f\x64\x9e\x5f\x67\xfd\x4b\xac\x3b\xe6\xd7\x0d\x97\x54\xe3\x5b\xf4\x8f\x12\x35\x5d\xd7\x4d\x29\x45\xfa\x50\xd4\xae\x5f\x6f\x2f\x24\x7e\x0b\xc5\x21\xd7\x75\x9d\xf4\x13\x59\x7f\x8f\xd0\x2f\xfa\xaa\xcc\x23\xe6\x73\xd2\x35\xd4\x55\x05\x38\x03\xbc\x07\x9c\x06\x4e\x02\xef\x00\x6f\x02\x73\xc0\x2c\x70\x04\xa8\x03\x53\xc0\x24\x50\x03\xca\xbc\x3a\x2b\x32\x5f\xbc\x9e\xa8\x3c\x1f\x2d\xbe\x4a\x44\x6f\xbe\x22\x17\xca\xf9\x62\x5e\x2f\xc8\xfa\xa9\x6f\xc9\xcf\xc5\x79\xe8\x55\xea\x88\xf3\xdb\x30\xba\xd4\xd1\x17\x7e\x1d\x6d\xb4\xd5\x51\xfd\x91\x76\x46\xf2\x93\x3a\xa5\xfc\x24\xcf\x48\x7e\xf4\x53\xca\x4f\xea\x8c\xe4\x67\xe4\x94\xf2\xa3\x9f\x91\xfc\x64\x4f\x29\x3f\x23\x67\x24\x3f\xb9\x53\xc9\xcf\x0e\xde\x7f\xe5\xf5\x7b\x51\x62\xcb\x87\x69\x3e\x17\x3e\x2c\xee\x73\xe9\xc3\xa4\x9f\xe2\x75\x47\xc4\xe7\x90\xbe\xea\x81\x06\x1f\x06\x74\xd6\xe1\xb3\x56\xa4\xcf\xaa\x1b\x9e\x6f\xdb\x76\x83\xfb\x02\xff\x05\x5f\xe4\xf9\x21\xcf\x07\x79\xfe\xc7\xf3\x3d\x9e\xdf\x71\xd2\xbb\x98\xd7\xf3\x41\xcd\x90\x0f\xdb\xed\xe0\xc3\xda\xf3\xb7\xe1\x3e\x5b\xfe\xda\x7d\x12\xfb\x07\xd3\xb2\x6e\xf0\xbb\xe1\x62\x3f\x39\xe9\x55\xdf\xef\xdc\x9d\x12\x87\x73\xb8\xbc\xa8\x7b\xf5\xc6\x7a\xa5\x54\x84\xce\xfe\xa8\xd2\xee\x83\x6a\xfc\x5c\xaa\x5e\xd7\xbd\x7a\x0c\xfb\x20\x59\x9f\xcb\xf1\xee\x3e\xe8\x1e\x3e\x27\x57\x7e\xc3\xc6\xfa\x15\x1f\xa4\xee\x7b\x6f\xdb\x8f\xfc\xf5\x5f\x23\x78\x41\xce\xb0\xb8\x9d\x90\x17\x2e\x0d\xbb\x6a\x19\x05\xf3\xbe\x51\xf8\xf4\x39\x2f\xf0\x39\x35\xae\x49\xae\x47\xf6\xee\xec\xdb\xd9\xdb\xb3\xaf\x67\xef\xcf\xbe\x9f\xbf\x1b\xf0\xf7\x82\x0e\xfd\x6b\x5c\xdf\xdd\xba\x7f\x30\x39\x41\x27\xae\xeb\x26\x31\x2e\xb2\x32\x45\xda\x67\x03\x91\x4b\x38\xaf\x29\xe8\x6b\xf0\xe7\xff\x27\xa2\x2b\xd0\x9a\x9d\xbe\x70\x2a\xed\x92\xe8\xd3\x43\x7b\xb1\xa0\xfe\x3f\xe8\xa9\xbe\xa0\xfe\x3b\x49\xfd\x48\xd1\x7f\x85\x9e\x8b\x07\xf5\x37\x30\x0f\x69\x41\xfd\x35\xe8\xd3\x8a\x3e\x00\x5d\x4f\x04\xf5\xbf\x31\x7f\x4d\xd1\x7b\xd1\x7f\xb5\x27\xa8\xff\x89\xfe\x87\x8a\xfe\x0b\xf4\x4d\xe5\x4c\xff\x0c\xbd\xd9\xe1\xac\xf7\x50\x4f\x58\x14\x7a\x2c\xa4\x6d\x8a\x7d\xe9\x0f\xe9\x5f\x0b\x7d\x20\xa4\xdf\x16\x7a\x3c\xa4\x4f\x09\x5d\x0b\xe9\x1f\x09\x3d\xbc\x9e\xb8\xd0\xc3\xeb\x99\x41\x0d\x30\x0c\x11\x51\x2d\xea\xf3\x8b\x44\xb4\xdd\x13\x7c\x7f\xd0\x1b\xe4\xc7\xb1\x20\x4f\xc6\x83\x3c\xab\x05\xf9\x64\x22\xc8\x35\x25\xfe\x65\xac\x8b\x33\x74\xde\xbb\x47\xc0\xf9\xef\x29\x65\xaa\x66\xad\x4a\xe2\x36\xa9\xcc\x97\xe6\xaa\xf9\xbc\x5d\xb7\xf3\x7c\x48\x28\x63\x99\x65\xff\xc5\xa8\x65\x2c\xf3\x3b\x3e\x45\xf6\x68\xab\xd3\xac\x51\xb1\x47\xcd\x25\x73\xae\x6a\xcb\x67\xaf\x4b\x78\x4e\x3e\xa8\x4f\x9f\x54\xf4\xca\x2f\x99\x96\x5d\x9a\x9f\xa3\x7c\xb9\x54\x30\xe7\x6c\x53\x8c\xcb\x98\x33\xf9\x8f\x2d\x63\xd6\xa4\x8c\x5d\xb5\xaa\xc6\x7d\xca\xd8\xf5\x59\xc6\x89\x5b\xb7\xb2\xf9\x77\x25\xe4\x24\x8c\xbd\x03\xbc\x46\x19\x6b\xbe\x68\x54\x0d\x1e\x34\x96\x19\xbb\x26\xf5\xb7\x25\x8c\x03\xdf\x02\x05\x8e\x5d\x05\x8e\x43\x1f\x03\x66\x43\x5b\xfe\xaf\xda\x8e\x3c\xa5\xa1\x96\x1b\x92\x78\x55\xb9\x4b\xd4\xab\x25\x82\x1f\xe5\x5a\xc0\xff\xb4\xc2\x4d\x3d\x66\x8b\x4f\x19\xbf\xa6\x9c\x7b\xf5\x64\x2c\x10\x51\xa2\x43\x9c\x35\x5c\x9c\xab\xe0\x83\xf8\x9c\xde\x78\xef\x5e\xd5\xbb\xc4\xdf\xc7\xa4\xea\x5d\xaa\xc6\xbf\xdc\x25\xbe\x36\x14\x8c\x33\x08\x9f\xa8\xc6\x7f\x0f\xf1\xd5\x3d\xd8\xc3\x95\xa1\xfe\x5f\x46\xcd\xdf\x87\x5d\xc6\x1f\x9e\x7b\xb6\xf1\x7f\x60\xfc\xb8\xa2\x1f\x9f\x97\x38\xad\xe8\xad\xbf\x47\xc0\xad\x2e\xf1\xef\x0c\x76\x8e\xa7\xd6\xcf\xe3\x2e\xe3\x27\xba\x8c\x57\xf9\x4f\x18\xaf\xd8\x54\x9a\xc4\x78\xb5\x0e\xd5\xfd\xfb\xb1\xcb\xfe\xa5\xb0\x7f\x3a\x38\x4f\x77\xae\xc3\xfe\x35\x3a\xc4\xe6\xb6\x81\xf8\xcd\xb6\x7b\xf0\x42\xdb\x78\xef\xef\xf7\x3f\x01\x00\x00\xff\xff\xe7\x2f\xd8\xe0\x30\x16\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 5680, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

