// Code generated by go-bindata.
// sources:
// ../dist/straceback-guess-bpf.o
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackGuessBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x54\x4d\x68\x13\x41\x14\x7e\xb3\x9b\x26\x69\xfd\x69\x45\x84\x58\x3d\x14\xbc\x84\x1e\x92\x56\x2f\xc5\x53\x28\xd4\x96\x12\xa4\x08\x11\x3c\xd4\x65\xb2\x59\xdb\x42\x12\xe3\xce\x96\x76\x6b\xc1\x83\x08\x82\x47\x11\x02\x9e\x6a\x73\xc8\xb1\xb7\xe4\x16\x8f\x1e\x3d\xe6\xd8\x63\x8f\xc5\x8b\xbd\x8d\xcc\xcc\xdb\xee\x66\x76\x53\xc1\xab\x03\xd9\x2f\xef\xdb\xf7\xde\xf7\xde\xdb\x99\x79\xb7\x52\x7e\x62\x10\x02\xc1\x22\xf0\x1b\x42\x2b\x5c\xb9\x74\xf8\xbf\x84\xcf\x29\x20\xe0\xdf\xca\x4a\xab\x42\x5e\xc0\x0d\x02\xd0\xc3\xe0\xb7\xb3\x6d\x2e\x70\xf0\x4d\xd9\x19\x03\xa0\xcd\x39\xcf\x69\xc9\x3f\x48\x4d\x80\x01\xe6\xbf\x93\xde\x90\xe8\x53\xb4\xc9\xd3\x4b\xbf\x9b\xc2\x2f\x13\xc6\x3d\x80\xa8\xde\x05\x8f\xc6\x55\xc8\xaa\xcc\xeb\x53\x55\xdf\xe6\x9b\x15\x89\xa1\xff\x39\x57\x78\x86\x78\x8a\x38\x44\xfc\x89\xf8\x43\x62\xcf\x00\x30\x84\x3d\xdf\x57\xfc\xc1\x77\xa5\x67\xcf\xa8\x7c\x8f\x95\x9f\x5f\xcd\xa9\xfa\x6b\x73\x8a\x5f\xc7\x7c\xf3\x2a\x9f\x5f\xcb\x23\x7f\x3a\xa2\x4f\x6b\x4b\x92\xb7\xd7\x55\x5d\x15\xb3\x88\x75\x9e\xa0\x5f\x57\xa2\x3d\xdb\x91\x38\xad\xd2\xc3\xe0\x08\xe7\x4b\x00\x4e\x38\xe7\xa2\x4e\xd1\xf1\xc0\x0c\xe7\x94\x92\x73\x50\x01\xfe\xb1\xca\x37\x7d\x3b\x1e\xdf\x8d\xc4\x07\x71\x5b\x00\x20\x22\xf7\x10\x73\x19\x80\x5f\x9c\xf3\xe0\xfb\x6d\xb6\xcc\xcb\xb9\x1a\x91\x7e\x26\x60\x1a\xbf\x63\x1e\x75\xbb\x63\x75\x3b\xa8\x9b\xba\x42\x37\xaa\x43\x46\x74\x0c\xc9\xd3\xa3\x0e\xce\xe7\x3c\xb6\xef\x2e\x38\xe7\x83\x63\xb4\x4d\x80\x7e\xc2\x3e\xec\xa5\xc2\x79\x89\x8c\x3d\xe4\xbf\x20\x0a\xf7\x2c\xee\xfd\xa4\xf3\xf1\xbf\xae\xd5\x8d\xb2\xc4\x19\xb4\xc9\xc1\x33\xc8\x1e\x5e\x23\xf7\x90\xcb\x21\x7f\x66\x5c\x9d\xe7\xb3\x7c\x9a\xf0\x51\xf3\xfb\x84\x7c\x5b\xe3\xdf\x23\x3f\xd4\xf8\x43\xe4\xe7\x12\xf4\x4c\x30\x63\x5c\x45\xd6\x99\x8e\xf1\xd7\x25\x3f\x11\xe3\xef\x4a\x3e\x9e\x67\x01\x51\xec\x0d\x71\x45\xf5\x8d\x51\xfb\x3e\xbe\x9f\x92\x7b\x16\x00\x0a\x9e\xb3\xef\x41\x83\xb6\x58\x71\x6b\xd7\x61\xcc\x62\x1e\xf5\x76\x19\x78\x2e\xb5\x9d\xd6\xeb\x9d\xa6\x67\x59\xcc\x67\x96\xd3\xf4\x1c\x17\x0a\xae\x53\x0f\xdf\x14\x5d\xba\x27\x5e\xda\xb4\x5e\x67\xc5\xd0\xcb\xaa\xef\xd8\x4e\x93\x39\xd2\xbd\xe0\x6c\x5b\xaf\x5c\xda\x70\xa0\xc0\x3c\xd7\xa3\x55\x28\x30\xbf\x21\xb0\xbc\xbc\xbc\x60\x2d\x29\x58\x7c\x88\xb8\x88\xb8\x10\x9f\xdb\xbf\xac\xba\x9c\x77\x7c\xed\xe3\x48\xbf\x6a\xbc\x7e\xa6\x08\xfe\xf4\x2f\x53\x1a\xa3\x97\xd2\xec\x47\x7f\x89\xd7\xf7\x63\x56\xf3\x13\xb7\xef\x64\x82\xce\x1a\xd6\x8f\xd7\xaf\xf4\x31\x23\xf1\xc1\x39\xc8\xa0\xbe\x3e\x83\x3c\x12\xfa\xfd\xa3\xd7\xff\x7c\x4c\x7c\x29\x95\xec\xaf\xcf\xaf\x8a\x9c\x7e\x0c\xd6\x30\x30\xaf\xf1\x7a\xff\x2f\xc7\xf4\xbf\x8d\xfd\x07\x7d\x4e\x62\xaf\x7a\xff\x5e\x82\xb6\x58\x2d\xd4\x1f\x46\xea\x4e\x47\xe2\x83\xfb\xe2\x4f\x00\x00\x00\xff\xff\xc4\x67\x5a\x2a\x98\x08\x00\x00")

func stracebackGuessBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackGuessBpfO,
		"straceback-guess-bpf.o",
	)
}

func stracebackGuessBpfO() (*asset, error) {
	bytes, err := stracebackGuessBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-guess-bpf.o", size: 2200, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x96\x3b\x6f\x13\x41\x10\xc7\xff\x67\xc7\xc4\x79\x80\x83\x44\x90\x25\x52\xa4\xa4\x40\x8e\x49\x45\x99\xb3\xb8\x84\x08\x27\x58\x8e\x83\x02\xcd\x6a\x63\x0e\xb0\xf0\x4b\x77\x07\x24\x3c\x04\x12\x8a\x84\xe8\x28\xa8\x41\x88\x8f\x80\x04\x54\xa1\x00\x89\x06\x44\x81\x50\x44\x45\x41\x49\x41\x81\x44\x0a\x84\xd1\xed\xcd\x61\x67\xee\x0e\x5b\x34\x2e\xc8\x48\xc9\x66\x7e\x3b\xb3\xb3\x37\x3b\x3b\xd9\x5b\x46\x7e\x36\xa6\x69\xf0\x45\xc3\x0f\xb4\xb5\xb6\x6c\x0d\xb5\xff\x9e\xa1\xdf\xfb\xa1\x61\xf3\xa0\xc7\x36\x00\x14\x00\x5c\x1f\xde\x6e\xb9\xfa\xe6\x63\x8f\x0f\xc6\x80\xed\x56\xab\x95\x66\x8b\x6e\xa8\x58\xc0\x38\x12\x4a\x97\x71\x8f\x6f\x4a\x6f\x4c\xc7\x82\xf6\xa3\x00\x9e\x91\xfe\x80\xc6\x7e\xc7\xbf\xbd\xd3\xec\x5b\xcb\x93\xd4\x2f\x1a\x09\xa4\x52\x64\xe0\xc6\x4c\x02\x18\x08\xfa\xfe\xd7\x12\xa7\x9c\xec\xe6\x65\xa7\xec\xe6\x25\x5c\xfc\x7b\x94\x05\x25\x07\x80\x7b\x65\x6d\xc7\x92\x65\x73\x55\x96\x2f\xf5\x79\x83\x7d\x92\xb9\x42\x1e\x6e\xef\x19\x23\x5d\xbb\x56\x44\xf2\xc6\x88\x76\x08\x80\xcb\xd2\xc4\xfd\x5a\x3a\x00\xe0\x08\x63\x7f\x93\x7b\xaa\x8f\xc6\xd1\x64\xfc\x8e\xe2\x89\x00\xf7\xac\xe3\xa1\x6b\xc5\xa9\xf7\x76\x8a\xd4\xdc\x7d\x0e\x06\xf8\x4f\x78\x3c\xc9\xf8\x31\xb2\x9f\x64\x7c\x9c\xf8\x61\xc6\xeb\xc4\xc7\x18\x3f\x4d\x3c\xcd\xf8\x5b\x15\x77\x34\xb0\x9f\x57\x8a\xef\x0d\xf0\x17\x8a\xf3\x5d\x02\x67\x15\x1f\x09\xf0\x27\x8a\x0f\x05\xf8\xac\xe2\xc3\x01\x5e\x56\x3c\x98\xcf\x41\xc5\x83\xf9\xf4\xbf\xdf\x3d\x1e\x77\xb7\x2b\x1d\x7a\xaa\xcb\xbc\x9b\xa3\x09\xd2\x87\xa9\x17\x65\x3b\x74\x75\xed\x32\x8e\xb9\xe6\x40\xdd\xba\x66\xa3\x52\x77\x84\xb0\xd7\x6d\x61\xae\x55\x1c\x64\x2c\xb3\xda\x9e\x98\xb2\xe4\x55\x77\xae\x2c\xab\x55\x7b\xea\x8f\x51\x4d\x36\xed\x29\x47\x56\xaa\xc2\x9d\xe8\x60\xbe\x69\x70\xed\xba\x63\x5a\xdd\x17\x57\x56\x7c\xf5\x36\x2c\x5f\xb0\x1a\x97\x9b\xa2\x26\x9b\x10\x57\x4c\xcb\xae\x34\xea\x10\xd5\x4a\xd9\xac\xdb\xa6\x5a\x3c\x63\x5e\x14\xe7\x2d\x59\x33\x91\xb1\x1d\xcb\x91\xab\xc8\xd8\xeb\x35\x35\x5a\x8d\x73\xd2\x91\x28\xe8\x45\x7d\x41\x14\x8a\xa7\x72\x86\xd0\x4b\xc2\x58\x99\x2f\x89\x05\x7d\xe9\x24\x96\x97\x0c\xa1\x17\xe7\xc4\xfc\xe2\x71\x63\x45\xe8\x4b\xc2\xb3\xcc\x1b\x8b\x73\xa5\x13\x3d\x98\xa8\xd9\xa2\x51\x0a\xe5\x8b\xcb\xf9\xbc\xc8\x9d\x29\x19\x3e\xcc\xe7\x72\x47\xc5\xb4\x3b\x64\xc5\x74\xa0\x00\xfe\x51\xbe\xd0\x79\x73\x99\xa1\xd2\xbe\xcf\xde\x53\xfc\xcd\xa8\xd1\xcf\x1e\xee\x1f\x11\x6f\x80\xe9\x37\xbb\xf8\xf3\x5e\xc5\x6f\xdc\x3a\x10\x72\xab\x80\xcf\xd4\x5a\xfc\x7e\x31\x46\xdf\x99\xec\xd0\xfd\xf9\xb0\xf8\x2f\x7b\x8c\x3f\x11\x11\xdf\x37\xec\x8c\x9f\x08\x89\xff\x9d\xe2\xb3\x67\x28\x66\x28\xd1\xd9\x2e\xf1\x9f\x92\x3f\x3f\xc3\x26\xf9\xf3\xf7\x30\xcf\xff\xc3\x08\xff\xbb\xb1\xde\xfc\xf5\x08\xff\x47\xf1\xde\xfc\x97\x23\xfc\x9f\x0f\xf4\xe6\xff\x2e\xc2\xff\x7d\x22\xdc\x9e\xd7\xef\xeb\x08\xff\x0f\x11\xfe\x5c\xff\x14\x71\x7e\x5b\xe4\xcf\xef\x01\x3f\xbf\x8f\x11\xf5\x33\x19\x52\x3f\xfb\x42\xea\xe7\x6b\x48\x6c\x57\xd2\x54\xd0\x6f\xe8\x83\x35\x56\x7f\xfe\xff\xbf\xdf\x01\x00\x00\xff\xff\x6e\x9b\x5a\x47\x18\x0e\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3608, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\x7f\x68\x9b\x5b\x19\xc7\xcf\x9b\x1f\x37\x69\xb7\x35\xb9\xbd\x76\x66\xb9\xde\x6b\xb6\xdd\x79\x4b\x70\x5d\x92\x36\x69\xf6\xfe\x21\x6d\xb1\x5b\xb7\x75\xbb\xa1\xdb\xbc\xbd\x93\x99\x66\x59\xee\x56\xb7\x76\x5d\x12\x76\x97\x45\xd8\xee\x76\xaf\xd6\x29\xd2\x8b\x28\x75\x82\x74\xdb\x05\x37\x04\x6f\xc5\x3f\x52\xf1\x8f\x04\x14\x1c\x08\x5a\x10\xb4\x20\xe8\x40\xd0\x82\x7f\x58\xf0\x8f\x5b\x10\xf6\xca\x7b\xce\xf7\x24\x39\x4f\x12\xd6\xa1\xb8\xd4\xf6\x85\xed\xe9\xf3\x39\x3f\x9e\xe7\x3c\xe7\x39\x4f\xde\x9c\xd2\xeb\x83\xc3\x07\x2c\x9a\xc6\xe4\xa3\xb1\x8f\x59\x45\xab\x3c\x8f\x23\x95\x9f\xfb\xf0\xbf\x9b\x69\xac\xb8\x5d\xb0\xf7\x19\x63\x4e\xc6\x58\xd1\x59\xd1\xdb\x4c\xbd\x45\xe8\xf9\x3b\xab\x86\xe4\x76\xc6\x58\x2e\x21\x3a\xe6\xbd\x2b\x9c\xe7\x5b\x67\xb8\x2c\x38\xd0\xff\xda\x2c\xd7\x2f\x5c\x9b\x13\xf2\xf6\x3d\x2e\x93\xde\x0f\x45\xff\x3b\x0f\x84\xbc\xb6\x0c\xf9\x18\x72\x09\x72\x11\xf2\x11\x64\x09\x72\x01\x72\x1e\x72\x1a\xf2\x06\xe4\x55\xc8\x29\xc8\xf3\x90\x63\xf0\xf3\xc1\x13\x21\x47\xb9\x5e\xbc\x27\xfc\x75\x58\x18\x5b\x31\x0c\xc3\x43\x82\xf7\x3e\x8f\x69\x25\x2e\x1d\xce\x9d\x16\x3e\xee\x2e\xc6\x69\x8c\xcd\x1b\x86\x51\xb0\x30\xe6\x46\x7f\x37\x8f\x8f\x9b\xb7\x8f\xdf\x17\xeb\xcf\x7b\xe1\xbf\x57\xf8\x91\xbb\x21\xc6\xe7\x12\x1e\xc4\x11\xeb\xf4\x0a\x7f\x73\xef\x39\xd1\xee\x43\x3b\xe2\xe1\x15\xeb\xca\xdd\x74\xa3\xbd\x13\xed\x88\x9b\x57\xac\xbf\xa0\x09\xbf\x0b\x76\x21\x4f\x4f\x89\x85\x99\xba\xf9\xb8\xc2\xb0\x7f\x4b\xd8\xcf\x8d\x05\xc4\x3c\xad\xd8\x87\x56\x11\xcf\x02\xd6\x7f\x3a\x8b\xf1\x88\x8b\x2b\x86\xf1\xef\x09\xff\x72\xa9\xa8\x18\x7f\x0a\xfb\x79\x4a\xec\x4b\xd9\x7e\x9a\xd8\x87\x2c\xcf\x9f\xa9\x3f\xbf\x19\x57\xc5\xbe\x05\xed\x16\xe9\xbf\x58\x7f\x79\x3c\xf6\xcf\xb5\x53\xc8\x0b\x5e\x11\xff\xe2\x87\xd8\x2f\x1b\x63\x33\x86\x61\x14\x13\x42\xf7\x58\xd4\xfd\xf6\x58\x19\x33\x0c\xc3\x90\xba\xe9\xef\x18\xf6\x75\x07\xc9\x97\x55\x73\x9e\xfb\xd0\xad\x8c\x8d\xd6\xc9\x9f\x82\x4d\x48\x73\xbc\x69\xaa\xf8\x10\xfd\x5b\x18\x5b\x7c\x62\x18\xb9\x9b\x42\xef\xb0\x0c\x0b\xfb\x5a\xc5\xbe\x61\x18\xae\xbd\xed\x87\xca\xfc\x49\x15\x7f\xa5\xfd\x80\xb2\xde\xbc\x37\x86\xfd\x1f\x82\xec\x83\x8c\x42\x06\x20\x3b\x21\x7d\x90\x1e\x48\x37\xa4\x13\x92\x41\xae\x8a\xf3\xe2\x5d\x81\x5c\x86\x7c\x0c\xb9\x04\xb9\x08\xf9\x88\xcb\xdc\x7d\x9c\x33\x7d\x9e\xcb\x82\x55\xac\x3f\xaf\x2f\xa0\x5f\x89\xcb\x0c\xfc\xae\x8e\x3b\x5f\x5f\x68\x7b\x79\xdd\x2b\xd5\xf1\xd8\xd9\xc6\x79\xf1\x75\xb1\xee\x37\x1d\x8c\xb9\x90\x17\xe6\x91\xda\xe3\x68\xe5\xf5\x89\xee\x53\xa3\x73\x2d\xf3\xa9\x83\x59\xb9\x3c\xe7\x60\xfc\x27\xd7\x14\xf2\xcb\xe2\x2c\xc7\xd9\x9c\x7f\xef\xce\x4a\x1e\x9a\x7a\x71\xb7\xe8\x67\x67\x62\xa2\x8c\xf7\x0d\x43\xb6\x5f\xe7\xeb\x45\x3c\x92\xe2\xbc\x16\x3f\xa8\xd8\x37\x53\xe3\x1c\x63\xcc\x3c\x41\xef\x40\x76\x60\x1e\x79\x7e\x65\x7c\xaa\xf3\x77\xfe\xc9\xb3\xe5\xef\x83\xaa\xfc\xcd\xdd\x74\x22\xdf\x8e\x36\xc8\xb7\xc3\x0d\xf2\xed\xe0\xba\xcb\x37\x8d\xeb\xa5\xba\xf9\xb7\x71\xf2\xce\xd3\x24\x79\xe7\x46\xde\x6d\x94\x3a\x57\x02\xdf\x68\xf9\xe6\x6b\x92\x7c\xf3\x20\xdf\xfe\xff\xeb\x9c\x75\xb3\xce\xb1\x5c\xb2\xb3\x49\xf2\xce\xb7\x61\xf2\xce\xb6\x99\x77\x2c\x97\x0c\x34\x49\xde\x75\x6e\x98\xbc\xb3\x6f\xe6\x1d\xcb\x25\xa3\x4d\x91\x77\xf2\xfb\xfa\x77\x20\x6b\xee\x93\x1c\x15\xbd\xad\xea\x1e\x25\x7f\x7b\x8d\xf7\x49\xf8\xfe\x9f\xf7\xcf\x96\x75\xf3\xb9\xe0\xc7\xbd\xd2\x35\x72\xaf\x74\x1b\xf7\x4a\x7e\xdc\x43\xf8\x71\x9f\xe1\xc7\xfd\x88\x1f\xf7\x28\x7e\xdc\xb7\xf8\x71\x2f\xe3\xc7\xbd\x92\x5f\xdc\x2b\xc9\xfb\x1b\x79\x6f\xb3\xe6\x7b\x22\xac\xb7\xc3\xd1\x21\xe2\x51\xf5\x7d\x7f\xde\x30\x8c\xb5\xe6\x91\x8c\xd3\x49\x67\x9b\xb2\xcf\xf4\x9e\xe9\xbf\x75\xaf\x51\xb3\x8f\x55\xf7\x5b\x4e\xc3\x30\xe4\x39\x2d\xbe\x5b\xc5\xab\xce\x6b\xee\x72\x5d\xbb\x6e\x59\x77\x0a\x56\xec\xbb\x8e\xfb\x3a\x1d\xf7\x75\x3a\xee\xeb\x74\xdc\xd7\xe9\xb8\xaf\xd3\x71\x5f\xa7\x8f\x42\xa2\x2e\xe9\xa8\x4b\x3a\xea\x92\x8e\xba\xa4\xa3\x2e\xe9\xa8\x4b\x3a\xea\x92\x8e\xba\xa4\xa3\x2e\xe9\xa8\x4b\xba\xa8\x4b\xf2\xfe\x25\xef\x17\xf5\xc8\x8c\x2f\xaf\x27\x7e\xd4\x29\x5d\xd4\xad\x0c\xfc\xf6\xd8\xd4\xba\x52\x6c\x17\xe3\xe3\x03\x42\xbe\x32\xe0\x2c\xc7\xbb\xba\xce\x9e\x0e\xe1\x3e\xef\x8c\xc8\x2b\x59\x6f\x27\xda\x5d\xe5\x7d\x65\xfc\x2c\x6c\x63\xc2\xde\xd7\x94\x73\x6f\x67\x6d\xe5\x79\x95\xfa\xb5\xdb\x51\x1e\x6f\xd6\x8f\x37\x35\x51\xbf\xf6\x68\x36\x7e\xae\xce\x69\xa2\xfe\xe4\xee\x89\x7d\x72\xc1\xdf\xdc\x2e\x56\xf6\xa3\x6e\x1d\x7a\x0d\x71\x39\x8c\x38\xdd\xc5\x3e\xbf\x84\xf1\x77\x45\x3e\xac\xbd\xee\x4c\xd7\xd4\x9d\xe5\xff\xe4\xf3\xee\x32\xe2\x4c\xf6\x63\x6f\xbf\x86\x38\xae\xbf\xbc\x13\x75\x6e\xb5\x6e\x1e\xca\xfc\xa3\xf9\x66\xae\x5f\xf9\x3c\x1f\x70\xd4\xc4\xaf\x3a\xff\x64\xde\x65\xbc\x34\xbf\xda\x95\xfc\x9c\x08\x6d\x25\x79\xd9\xfa\xbf\xcd\xbf\xdd\x72\xdf\x10\xaf\x5b\xee\xa6\xc8\xbb\xfc\x9d\x25\xd4\x3b\xe1\x8f\xa7\x45\x19\xee\xde\xbb\xe3\xc8\xba\xcb\x3b\x4b\x55\xde\xd1\x7c\x7b\x5a\xbd\xf3\xd8\x49\xfe\x8d\x88\x7c\x38\x3d\xd0\x5a\x37\xdf\xe8\x7b\x69\xd3\xe6\x1f\x7e\x7f\x20\xdf\x5f\xcb\xbf\x27\x79\xee\x75\x4f\xf8\xb1\x77\xc7\xf0\xba\xcb\x33\xeb\x1a\xea\xdb\x66\xbe\xc9\x7c\xf3\x35\x49\xbe\x09\x3f\x6a\xeb\xdc\xfa\xcb\x3f\xdb\x66\xfe\x3d\x43\xfe\x75\x36\x49\xfe\x09\x3f\xd6\x63\xbe\xd9\x37\xf3\xed\x19\xf2\x2d\xd0\x14\xf9\xb6\x96\xef\xe7\x7c\xbd\x0f\xc5\x7b\xa0\x9d\x6d\xe5\xf2\x86\xda\xcd\x0c\xa1\xf9\xb8\x9e\x40\x02\xb8\x5c\xe8\x60\xab\xfa\xc7\x6c\x6c\xf3\xc1\xa3\xe1\xde\x88\x67\x03\xe2\x62\x6e\x61\x26\x9b\x4e\x24\x53\x67\x12\xc9\x0b\xcf\xd9\xc1\xe7\xf4\xc8\xb8\x44\x6b\x73\x6d\x43\x3f\x07\x63\xc3\xbc\x3e\xba\xa1\x6b\xd7\x46\x98\xf3\x2b\x5b\xb4\x97\x71\x3f\xe6\x01\x8f\xa1\x2e\x7d\x82\x31\xf6\x59\xb0\x55\xf7\xd3\xe7\xff\x34\xcf\x41\x2b\x9b\x7f\x51\xe5\x3f\xb0\x0a\xbe\x4a\xf8\x15\xf0\xbe\x76\x95\xff\x01\x7c\x81\xd4\xa3\x49\xf0\x25\xc2\x7f\x0b\xde\x69\x57\xf9\xdb\x72\x7e\xc2\x97\x2d\x82\xc7\x08\x7f\x08\x3e\x46\x78\x08\xfc\x01\xe1\x5b\xc0\x57\x08\x37\xc0\x57\x49\x3d\x3c\x05\x3e\xe7\x50\xf9\xbf\x34\xac\x97\xf0\xef\x83\x3f\x22\xdc\x81\x38\x2f\x11\xfe\x2d\xac\xd7\xe7\x54\xf9\x31\xf0\xf3\x84\x7f\x19\xfe\x44\x49\x3c\x8b\xe8\xef\x6e\x55\xf9\xe7\x64\x9c\x09\x5f\x92\xf3\x10\xfe\x01\xf8\x10\xe1\x7e\xf0\x19\xc2\xff\x82\xf5\x2e\x11\x7e\x18\xfd\xa7\xb7\xaa\xfc\x77\xe8\x3f\x47\xf8\x37\xc0\xe7\x09\x7f\x19\xf3\x5c\x25\xeb\xfd\x07\xd6\x55\x22\xfd\xbf\x0a\xee\xdc\xa6\xf2\xcf\x80\xc7\x08\xff\x08\x9c\xb9\x54\xbe\x1d\xdc\x43\xf8\x23\xf8\xd3\x49\x78\x4e\xc6\x93\xf0\x5d\xe0\x37\x08\xff\xb9\xcc\x13\xc2\xb3\xe0\xb3\x64\xbd\xba\x8c\x03\x39\x8f\x3f\x42\xff\x19\xc2\xf3\x32\xce\x84\x7f\x97\xaf\xcb\xce\xe6\xad\x2a\x5f\xb1\x08\xfe\x88\xf0\x9f\x80\x0f\x11\x7e\x06\x7c\x91\xf0\x97\xc0\x7d\xe4\x33\xff\xbe\x26\xf8\x79\xc2\xaf\xc3\x9f\x51\x72\xee\x3e\x69\x13\x7c\x86\xf4\xff\x12\xfa\x97\xc8\xf9\xbd\x0b\xbb\x8f\x09\xb7\x82\x07\x5e\x50\xf9\x2a\xf8\x02\xb1\xeb\x82\xdd\x21\xd2\xff\x57\xb0\x1b\x23\xfc\x0b\xe0\xb3\x84\x3f\x96\xfe\x10\xfe\x4f\xc4\xa1\x8f\x9c\xeb\x9f\xc9\xf8\x13\x7f\x0c\xcc\x3f\x46\xfa\x1f\x90\xfb\x48\xf8\xf7\xe4\x3c\x84\x8f\xc8\xfd\x22\xfc\xef\xf0\x87\x7c\xff\x65\xdf\x06\x1f\x23\x3c\x22\xed\x92\xf3\xfe\x75\x39\x3f\xe1\x7f\xc4\x3c\xbe\x2d\x2a\xff\x18\xf3\x44\x09\x2f\x80\xf7\x11\xde\x05\x3e\x4d\xf8\xa2\xb4\x4b\xf8\xaf\x61\x37\x40\xce\xfb\xdf\xe4\x3e\x12\xfe\x2a\xf8\x1c\xe1\xef\xca\x3c\x21\x7c\x00\xbc\x44\xf8\x2f\x60\x17\xbf\xd6\x2a\x3f\xb7\xc0\x63\x84\xb7\x49\xbb\xa4\x0e\x5c\x96\xf3\x13\xfe\x53\xcc\xe3\x26\x9f\xed\x13\x72\xbf\xc8\x79\xfc\x33\xe6\xef\x24\xfd\x7f\x08\x1e\x20\xfc\x05\xf0\xab\x84\x97\xa4\x3f\x75\xde\x29\xac\xcc\x5a\x0b\x39\xb7\xd7\xb0\x23\x9a\xf9\xde\xe2\xa8\xe1\x7f\x65\x82\x93\xf4\x64\xbb\xd0\xdf\x47\xb8\x81\xfe\x9d\x84\x8f\xa2\x3f\x75\xb3\x0f\xdc\x43\x78\x81\xcf\xb3\xa5\xc6\x9f\x1f\x73\xbe\xb5\x86\x9f\xe6\x9c\x7a\xc9\x78\x4f\x37\x6b\xad\xe1\xe3\x9c\xb7\xd4\xf0\x34\xe7\xb5\x71\x7b\x95\xf3\xda\xb8\xb9\x51\x17\x4c\x91\x62\xf8\x92\x06\x3d\x69\xbe\xff\x55\xe9\x67\xcd\xf7\x25\x9b\xaa\xcb\x7a\x29\xfb\x8f\x39\xd4\xf6\xa8\x53\x6d\x5f\x6c\x51\xdb\x1f\xb4\xaa\xed\x43\x5b\xd5\x76\xdf\x36\xb5\xbd\xd4\xa6\xb6\xcf\xba\xd4\xf6\xe8\x8b\x6a\xbb\xbb\x5d\x6d\x5f\x66\xea\x7a\x03\x9a\xda\x7f\x5a\x23\xf3\xd9\x54\x7d\xfe\x05\x55\x0f\xb4\xa8\xfa\xdc\x16\x55\xf7\xb5\xa9\xfa\x8c\x9b\xc4\xc3\xad\xda\xff\x14\xfc\x33\xc3\xf2\x96\xfc\x3e\x07\xfd\x94\xf9\x43\x57\x36\x75\x35\xcb\x26\x12\x53\x99\x7d\x53\xe9\x4b\x67\x52\xf1\x44\x36\x9e\xc9\x65\xe2\xa9\xab\xe3\x59\xc6\xbf\xec\x4d\x5d\x1a\x9f\xcc\xc6\x2b\xb0\x2b\x9d\xba\x58\x69\xd8\x97\x4e\xbc\x63\xb6\x25\x13\x17\x2f\x66\xf6\x95\x3b\xf1\x09\x53\x57\x52\x93\xd9\x8c\xf8\x59\x76\xa9\x9d\x73\x32\x9b\x4a\x3f\x7d\x52\xde\x2b\x7e\x25\x95\xce\x8c\x5f\x9a\x64\xf1\x8b\xe3\xc9\xd4\x64\x26\xc5\xc7\x75\xa5\xce\xc7\xdf\x4e\x27\x26\x52\xac\x2b\x93\x4d\x67\x13\x67\x58\x57\x26\x37\xc1\x65\xfa\xd2\xd9\x44\x36\xc1\x62\xfd\x23\xfd\x47\xe3\xb1\x91\x37\x06\x06\xe3\xfd\x27\xe2\x83\xa3\x87\x4e\xc4\x8f\xf6\x1f\x3f\xc2\x4e\x1e\x1f\x8c\xf7\x8f\x1c\x8c\x1f\x3a\xf6\xf9\xc1\xd1\x78\xff\xf1\xb8\xe8\x39\x3c\x78\xec\xe0\x89\xa1\x35\x74\xe1\xad\x23\x83\x27\xea\xf2\x63\x27\x87\x87\xe3\x03\x6f\x9d\x18\x94\x70\x78\x60\x20\x18\xdf\x6f\x8a\x40\x59\xec\x17\xb4\x17\x7a\x04\x7a\x0f\xf4\x6e\xe8\x41\xd9\x3f\x2a\xf4\x68\x54\xe8\x51\xe8\xbd\x90\x11\xf0\x08\xf4\x30\xf4\x30\xf4\x1e\xc8\x6e\xf0\x6e\xe8\x21\xe8\x21\xe8\x41\xe8\xbd\x30\x03\x19\x86\x0c\x41\xee\x8f\xc0\x7c\x04\x66\xa1\xf7\x40\xef\x86\x1e\x84\x1e\x86\xf7\x61\x4c\x0b\xbd\x17\x32\x0c\x1e\x86\xde\x03\x19\x02\x0f\x41\x0f\xca\x76\x84\xb4\x07\xd3\x41\x8f\x40\x0f\x43\xef\x86\x1e\x82\x1e\x94\x1c\x4e\x62\x16\xc8\x28\x70\x14\x7a\x2f\xf4\x5e\xe8\x11\xc8\x30\x78\x18\x7a\x0f\xf4\x1e\xe8\xdd\x90\x21\x70\x29\x83\x52\x06\x64\x07\xcc\x0f\xd9\x13\x82\x97\x21\xd9\x0f\x60\x7f\x10\x8e\x05\xe1\x08\xf4\x30\xf4\x6e\xe8\x21\xc8\x20\xf8\xfe\x00\x16\x12\x80\x21\xe8\x11\xc8\x1e\xf0\x1e\xe8\xdd\x90\xa1\x80\x74\x20\x50\x53\xe7\x9f\xf5\xf9\x4d\xe5\xa3\x40\x79\x16\x42\x42\x76\x92\xf7\x67\xfa\xb7\x73\x1a\xfe\x91\xd7\x54\xfc\x0d\x5d\xed\x43\xaf\xf2\xbe\xf9\x94\xf1\x31\x72\x4f\x40\x3f\x39\xa7\x19\xab\xf3\xe9\xc8\x98\x33\x28\xe4\x0a\x74\x17\xd6\x29\xc7\xcb\xcf\xf7\xde\x06\xf6\x67\x60\x97\xde\x81\x50\xfb\xdd\x0d\xec\xaf\xc2\xfe\x5c\x95\x7d\x7b\x1d\xfb\x7f\x82\x7d\x0b\x5d\x17\x7e\xbf\x4f\x77\x98\xda\x1f\xc5\x78\xba\x87\x0b\x18\x4f\xef\x67\x69\xfc\xcf\x36\x18\xbf\xf8\xda\xda\xc6\x3b\x1a\x8c\x5f\xde\xb3\xb6\xf1\x0b\x0d\xc6\xb3\xd7\xeb\xf7\xa7\xf9\xf7\x51\x83\xf1\xb6\x06\xe3\xa9\xfe\xcb\x06\xf1\x77\x62\x3c\xcd\x63\x1a\xff\x52\x83\xfd\x9f\xc5\xf9\x91\xef\x9d\xe6\xfe\x6f\xab\xb3\xff\xbf\xaf\x63\xdb\x7c\x86\x60\xbf\x54\xf5\xde\xf1\xc5\xaa\xf1\xf2\x3d\xf4\xdf\x01\x00\x00\xff\xff\x15\xd1\x43\xc6\xe0\x3a\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 15072, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-guess-bpf.o": stracebackGuessBpfO,
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-guess-bpf.o": &bintree{stracebackGuessBpfO, map[string]*bintree{}},
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

