// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x5a\x14\xfe\x6e\x92\x36\x69\xda\xf7\x5e\x87\x07\x8a\x42\x41\x5e\xba\x41\xfa\x43\x08\xa1\x4a\x48\xa5\x12\x65\xe9\x50\x21\x31\x5b\xc6\x35\xc5\xaa\x93\x58\xb6\x43\x53\x82\x04\x4b\xff\x00\x06\x10\x23\x30\xb0\xb0\xd3\x6e\x61\x64\x60\xe8\x84\x3a\x21\x26\xc4\xc0\xc0\x04\x5d\xc0\xe8\xdc\x1c\xc7\xe9\xb5\xdd\x06\x26\x86\x1e\x29\xbe\xf7\x7c\xf7\xfc\xb8\xfe\xee\xf1\xc9\x7d\x70\x6d\x65\x39\x27\x04\x22\x11\xf8\x8e\x58\x1b\x90\xb1\x78\xba\xc8\xcf\x49\x08\x74\x4f\xf7\xb0\x6d\x00\xff\x02\xe8\x16\x63\x7d\x15\x40\xa7\x7c\x10\x92\xbe\x23\x80\x32\x80\x8d\xea\x97\xbe\x3e\xed\x38\x2d\xb3\xfa\x59\xea\x15\x01\x38\x4e\x4b\xa3\xb9\xb9\xee\x69\x9d\xea\xc7\x3e\xee\x2d\x68\x2e\xcd\xed\x35\x6d\xba\x53\xdd\xef\xe3\xfe\x96\xaf\xd3\xdc\x6a\x04\x56\xa7\xba\x27\xf1\xcd\x22\x40\x41\xba\xcf\x7b\xfb\x28\x0a\x60\x2f\x0c\xc3\x9d\x1c\x70\x8e\x70\xbf\x87\x77\x0b\xf1\x3e\x47\x49\x7f\xc1\xf6\x39\xe0\x20\x0c\xc3\x8a\x42\xc2\xb6\xe4\x06\x38\x85\x11\xa9\x1b\x79\x8e\x63\xf4\xc6\x4a\x2e\x69\x3f\x41\xef\xc9\xfa\x63\x1e\x7f\x87\x2f\x12\x7f\x80\x2f\xc7\x69\x95\x0f\xf1\xd5\xd2\x4c\x9a\xaf\x7b\xc4\x4b\xcc\xd7\x82\xe6\xda\x34\x5f\xd3\xa6\x9d\x54\xbe\xda\x76\x30\x0c\x5f\x67\xff\x02\xbe\x28\x46\x09\x00\xa5\x7f\x88\x13\x89\x24\xcf\x9c\x9c\xf0\x72\x58\x4e\x78\x39\x5a\xa8\x07\x50\xbf\xa4\x9e\x4a\xfd\x94\x7a\x2e\xf5\x5b\x9a\x94\xa3\xf5\xb6\x1d\xa4\x2e\x5f\x5f\x5d\xa1\x18\x3f\xc3\x30\x9c\xe4\x78\xe2\xde\x0d\x94\xee\x8f\x8b\x33\x00\x08\xab\x30\x3e\xcb\xfd\xe0\x7f\x00\xe7\x15\xec\x28\xf9\x21\x9f\x79\x68\x8a\xed\x37\xf9\x1c\x49\xe0\x3d\xeb\x7c\x6a\xac\x3c\xf7\x9e\x41\xe9\xca\x7d\x8e\x27\xf0\xd7\x12\x9f\x48\xe0\xaf\x24\x5e\x4c\xe0\x4f\x24\x5e\x4a\xe0\xcb\x12\x1f\x4b\xe0\x37\x25\x9e\xdc\x67\x51\xe2\xc9\x7d\xee\xf3\x28\xd8\xa6\x24\x62\xbd\x74\xcc\x3a\x65\x9f\xe2\xf5\x32\x7f\x13\xb3\x03\xba\x6c\xe5\xb5\xc0\x6a\x07\x08\x3c\xc3\xb4\xdc\xa6\xdd\x08\x74\x3d\x3a\x7a\xd4\x3c\xcb\x89\x17\x66\x3c\x63\x93\xd6\x4c\xc3\x71\xfc\x99\xbe\x51\xdd\x70\xfd\x99\xc0\xb0\x1d\x9d\x16\x7a\x58\x22\x1a\x15\xda\xf1\xe1\xa4\x95\x1a\x2f\x06\xcd\x75\xaf\xd9\x72\xf5\xba\xe1\x42\xbf\x6b\x79\xbe\xdd\x6c\x40\x77\x6c\xd3\x6a\xf8\x96\x0c\x5e\xb3\xee\xe8\xb7\x3d\xa3\x6e\xa1\xe6\x07\x5e\x60\xdc\x42\xcd\xdf\xaa\xcb\xd1\x6b\xae\x19\x81\x41\xf0\x5c\x6d\xee\x12\x56\x96\x96\xe6\xf4\x79\x1a\x66\xf5\xf9\x04\xe7\x7f\x22\xef\x99\x5f\x55\x0e\xb8\x64\x0a\x4a\xbd\xaa\xe5\x2b\xf8\x37\xaa\xe0\x8b\x19\xf9\x0a\x8a\xde\x3c\xc6\x5f\xfd\xe6\xd4\x8a\xdd\x38\x7c\xb5\xeb\xcb\x53\xde\xbf\xc6\xfa\x7f\xfc\x9e\x91\x7f\xf4\xfd\x6b\x19\xf9\x5d\x31\x5c\xfe\xa9\x8c\xfc\xbb\x29\xf9\x47\x52\xf2\xbf\xe4\xfc\xea\x19\x3c\xe3\xfb\x85\x7a\x2f\x51\xf9\x7b\x94\xe1\xbf\x9b\x1f\xce\xff\x6a\x86\xff\x5e\x61\x38\xff\x4f\xec\xaf\x56\xe3\x57\x6e\x09\x57\x14\xbc\xdf\x77\x79\x7c\x93\x91\xff\xc2\x68\x7a\x3e\xb5\xfe\x76\x32\xfc\x2f\x66\xf8\xab\xfa\x3b\xf6\x57\xae\x73\xb8\xcc\xfe\x6a\x1d\xab\xe7\xff\x36\xe3\xfc\xf7\x53\xce\xff\x9f\x94\xf3\xff\x90\x92\x9b\xa4\xcd\xf9\xb5\x81\xbe\x38\x58\x3f\xd1\xff\xd4\xaf\x00\x00\x00\xff\xff\x91\x9b\x82\x01\x00\x0d\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3328, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x31\x4c\x13\x61\x14\x7e\x07\x94\x96\x12\x49\x07\x63\xea\xc9\x70\x4b\x13\x4c\x48\x01\x07\x63\x48\x48\x70\x10\x17\x24\x84\x89\xad\x9c\xed\x09\x4d\x4a\x69\xee\x0e\x28\x9c\x89\x26\xc6\x04\x99\x88\xc6\xc4\xe0\x20\x26\x0e\xba\xe9\x54\x9c\xca\xa8\x1b\x23\x23\x23\x23\x9b\x1d\x8c\x67\xde\x7f\xdf\xf5\xca\x7f\x77\x82\x46\x37\xff\x84\xbe\xfb\xbe\xfb\xdf\x7d\xf7\xbf\xef\xbd\xe3\xd1\x9d\xe9\xa9\x2e\x45\x21\x7f\x29\xf4\x8d\x02\x14\xac\x4c\x2a\xb8\x9e\xc4\xef\x00\x29\xd4\xbc\xe2\x71\x4f\x89\x88\xb7\x34\x53\x01\x1e\x60\x9c\x0c\x70\x82\x88\x9c\xf4\x8e\xcb\x78\x31\x45\xa4\x11\xd1\x3a\xa2\xb3\xfd\x4a\xf0\xce\xe6\x9e\x88\x8d\x3e\x2f\xcf\xd9\x7d\x2f\xf0\x86\xee\x3d\xd8\x51\x3f\x7a\xfb\x76\x5b\x88\xa7\x88\x27\x88\xc7\x88\x47\x88\x87\x88\x5f\x10\x0f\x10\xf7\x45\x6c\xbe\xf5\x74\x92\x0a\xd1\xbe\xeb\xba\x8d\x2e\xa2\x0c\xde\x37\x23\x74\x6f\x41\xf7\x14\xef\x31\x0a\x7c\x02\x3c\x04\x7c\x0c\xac\x01\x1f\x01\x67\x81\x0f\x81\x33\xc0\xde\xfb\x34\xdf\x41\xbf\x87\x68\xc7\x75\xdd\xa6\xee\xe1\x6c\xd7\xd9\xfa\x37\x9f\x78\xb1\x91\x20\xaa\xe1\xfd\xae\xf2\x3e\x85\x48\x33\x4c\x93\xef\x4d\xe4\x4a\x69\x47\x7d\x2c\x9e\xcb\xfc\xaa\x36\x33\xc7\xd7\x5a\xae\xb2\xea\xa8\xf5\x36\xaf\xd5\xca\x25\xf0\x15\x47\xad\xb5\xf9\x61\xcd\xa8\xf2\xb5\x6d\x98\xe3\x8e\xba\xd4\xe6\x6d\xbd\x5c\xe1\xeb\xa2\xce\xfb\x17\x04\xbf\x9e\xf4\x7c\xb3\x76\xb7\xbc\x73\x95\x3c\x7f\x3a\xeb\xb9\x80\x7a\x5e\x67\xde\xc2\x39\x12\x41\x3f\xf4\xf2\x79\x70\xbe\x97\xfe\x39\xff\x55\x3f\x29\x24\xfa\xda\x51\xa3\xfb\xa9\x81\xa6\xf7\x7d\xf6\xfd\xf5\x7d\xf5\xfd\xf4\x7d\xf4\xfd\x73\x54\xf4\x93\xba\x2f\xf9\xdb\xba\x50\x7f\xfd\x0d\xff\x0d\xd3\x9c\xe0\x7b\xb9\x52\x9a\x3a\xfd\xd7\x66\xe6\x44\x33\xe6\x2a\xab\x5a\xa7\xff\xb5\x72\x09\x3c\xf7\xc5\x19\xff\xeb\x7c\x5d\xb6\xc7\xb5\x8b\xfa\xff\x2b\xdf\x87\x7e\xc3\xf7\x9e\x8e\x3f\xef\xe7\xff\xe2\xc5\xb5\xe7\xba\xf3\x6c\xf2\x5c\xf2\xec\xf2\xdc\xf2\x6c\xf3\x5c\xf3\xec\xf3\xdc\x47\xec\xaf\xb3\x8f\x71\xdb\xef\xce\x4e\xd3\x0f\xd7\x75\x33\xc8\x53\x36\xe7\x28\xf5\xb0\x5f\xb9\x86\xbe\xcc\x82\x9f\x45\x1f\x5e\x26\xa2\x61\x70\xad\xa8\x7f\x10\x11\xab\x9b\xba\x63\xf8\x44\x88\x7b\x2e\x74\xfb\x42\xfc\x33\xc1\xa7\x43\xfc\x94\xe0\x93\x21\xfe\x9e\xe0\xc3\xba\x49\xc1\x87\x75\xe7\x71\x16\x05\xdf\x93\x94\x84\x07\xb1\x2f\x0d\x6e\xb4\x03\x8b\xd2\xe4\x6d\xa3\x6e\x93\x6d\xea\x45\xa3\xb6\x52\xae\xda\x85\x82\xb5\x61\x15\xb8\xf8\x94\x37\x8d\x4a\x70\x63\xc4\xd4\xd7\xf9\x1e\xbb\x63\x8d\xb4\x37\x2d\xeb\x35\x6b\xc4\x58\x33\xaa\xb6\x15\x7e\x0a\x5b\x7e\xfe\x63\xc4\xae\xc2\x9a\x61\x5a\xe5\x95\x2a\x15\x2a\xe5\xa2\x51\xb5\x0c\x91\x97\x37\x96\x0a\x0f\x4c\x7d\xd9\xa0\xbc\x65\x9b\xb6\x7e\x9f\xf2\xd6\xc6\xb2\x88\xe6\x4a\x49\xb7\x75\xa6\xc7\xf2\x63\x37\x23\x8d\xfa\x83\xf5\x41\xf8\x1b\x5e\x93\xb0\xea\xab\xc4\xcb\xad\xa4\xe0\xaf\x57\xce\x8f\xd1\x93\x3f\x15\x8b\xe7\xe4\xcf\x4a\xdf\xd5\x94\xb4\xaf\x48\x14\xd1\x85\x68\x20\xcc\x06\xaf\x4b\x38\xa7\x9f\xef\xf3\x5a\x8c\xfe\x0e\x74\xe5\xd9\x91\xf5\x07\x63\xf4\x33\x11\xfa\x89\x08\xfd\xdb\xd0\x97\x3d\xd8\x42\xa1\xb2\x92\xbe\x5c\xbf\xcf\xc8\xbf\x21\xf1\x7b\x18\x9d\x79\xf9\xbd\x10\xfd\xc7\xbe\x88\xd1\x6f\x25\xa2\xf5\x64\xff\xb7\x63\xf2\xbf\xc7\xe4\xcb\xf8\x0d\xf2\x25\x9b\xdb\x86\xc8\x7d\x24\xd7\xff\x75\x4c\xfd\x35\xd4\x5f\x03\xe6\xfa\xf7\x47\xd4\xff\x53\x94\x36\xeb\x42\xff\x00\x58\x91\xfa\xc7\xff\xde\xfe\x0c\x00\x00\xff\xff\x97\x34\xc4\x97\x90\x0b\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 2960, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

