// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x40\x14\xfe\x1c\x37\x24\x4d\x8b\xe8\x00\x28\x12\x1d\x32\x32\xa0\x24\x74\x62\x0c\x95\x28\x4b\x86\x0a\x09\xa9\x62\x31\x57\xeb\x80\x88\xfc\xb0\x6c\x03\x0d\x3f\x44\x97\x4a\xfd\x07\x98\x41\xa8\x03\x7f\x00\x12\x62\x0a\x03\x8c\x30\x32\x30\x33\x30\x30\x22\x51\x09\x09\xa3\xbb\x3c\xe3\xf0\xce\x47\x22\x96\x0c\xf4\x93\xe2\xcb\xfb\xee\x7d\xef\x9d\xdf\xbd\xb3\xfd\xf8\x52\x7b\xa3\xe0\x38\x48\xe1\xe0\x3b\x32\x2b\xc3\x7e\x39\xfb\xdf\xa2\xeb\x0a\x1c\x8c\x4e\x8f\xb9\x3d\x00\x9b\x00\x1e\x54\x0e\x13\x65\x8f\x9e\x8f\xf9\x52\x01\x38\x4c\x92\xa4\xca\x82\xee\xe9\x5c\xc0\x29\x14\xb5\x2d\xdc\x31\x3f\x12\xe3\xb1\x5a\x30\xfd\x97\x01\xbc\x22\xfb\x09\x8d\xf3\xce\xaf\x62\xa8\xd2\x2c\x00\xd8\xcd\xa9\xdb\xff\x0a\x97\x6a\x72\x54\x97\x3f\x71\x54\x97\x7c\xa4\xe7\xa8\x09\x2a\x0e\x00\x75\x04\xa3\x38\x14\xbe\xdc\x16\xfe\xed\x39\x2f\x70\x4e\xb8\xbc\xd9\xc6\xcf\x24\x49\x56\xc8\x76\xee\x5f\x41\xf9\xe1\x92\x73\x06\x80\xe2\xaa\xc4\xa7\xbd\x74\x12\xc0\x39\xc6\xfd\x0d\x3f\xf4\xd5\x45\xc0\xf8\x6f\xfa\x5a\x34\xf8\xb1\xb7\x9b\x1b\xcb\xa5\x67\xe9\x24\xde\xeb\x75\x2e\x19\xfc\x5b\xcd\x2f\x1b\xfc\x6b\xcd\x97\x0c\xfe\x9a\xe6\x2b\x06\x7f\xa0\xf9\xb2\xc1\x6f\x68\x7e\xd1\xe0\x7d\xcd\x9b\xeb\x2f\x69\xde\x5c\xff\x59\x1a\x1d\xf2\xd9\x9a\xb0\x17\xa7\xcc\xab\xd5\xae\x92\x5d\xa1\xb3\xdf\x9c\xb0\x75\x9b\xd7\x63\xb9\x13\x43\x77\x79\x30\xe8\xf4\x63\xcf\x8b\x86\x91\x27\x77\x3a\x31\xea\xa1\xec\x66\x13\x8d\x50\xdc\x53\x73\xbe\xe8\x76\xa3\xc6\x6f\xa7\x9e\x08\xa2\x46\x2c\x3a\x5d\x4f\x4d\x4c\x70\xa9\xab\x19\xbb\x1f\xcb\x70\x7a\x70\xed\xc5\xa3\x67\xa4\x7f\x33\x1c\xdc\x09\xbc\x9e\x08\xe0\xdd\x95\x61\xd4\x19\xf4\xe1\x75\x3b\xbe\xec\x47\x52\x07\xaf\xcb\x5b\xde\x8d\x50\xf4\x24\xea\x51\x1c\xc6\x62\x1b\xf5\x68\xd8\x53\x63\x7b\x7d\xfd\xbc\xb7\xa6\x86\xa6\xb7\x66\x54\xfc\xdf\xf0\x99\xea\xcb\xb1\x4b\xad\x54\x60\xef\x7f\xfe\x8d\xe3\xd0\xef\x18\xe3\x5b\x96\x7c\x0b\xcc\x7e\x34\x45\xcf\xcf\x22\xef\xd8\x21\xf5\x13\x47\x8d\xd6\x5f\x23\xfb\x04\xdd\x67\xaa\x4f\x9f\x0b\x35\x4b\xfe\x37\x33\xe6\x5f\xb5\xe4\x6f\xe5\xe4\x2f\xe6\xe4\x7f\x49\xf9\xf9\x1e\xb4\xa8\xd0\xfc\xfb\x8b\xd7\xef\xa9\x45\xbf\x55\x98\x4d\x7f\xd1\xa2\x0f\xdc\xd9\xf4\x57\x2d\xfa\xfd\x85\xd9\xf4\x1f\x2c\xfa\x67\xc5\x7c\x7f\xde\x7f\xef\x2c\xfa\x03\x8b\x9e\xdb\x9f\x48\xcf\x3e\x5b\xf1\x82\xf4\xbc\x8f\xf9\xfe\x7f\xb4\xec\xff\xf5\x9c\xfd\x3f\x9e\xb3\xff\x5f\x73\x72\x2b\x7c\xa1\xfc\x17\xe8\x86\x1d\xd6\x3f\xe9\xfb\xeb\x57\x00\x00\x00\xff\xff\x95\x3b\xfb\x65\x88\x0c\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x41\x68\x1c\x55\x18\xfe\x67\x93\xed\x6e\xd2\xda\x0c\xd5\xe8\x3a\xf6\x30\x55\x03\x6b\xa9\xdb\x24\xd5\x1a\x2b\x85\x5a\xb1\x16\xac\xa5\x44\x0f\x85\x22\xdb\xc9\xee\x68\x96\xdd\xa6\xeb\xcc\xa4\xd9\xc9\x0a\x06\xa4\x58\x7a\x0a\xd5\x62\xe8\x69\x63\x3d\x54\x51\x28\x22\x6c\x6e\x9b\x9b\x3d\x49\x4f\xe2\x49\x72\x11\x72\x11\x7a\x11\x73\xb1\x23\xef\xbd\xef\xed\xec\xbc\xd9\x6d\xb5\x10\xaa\xc1\x81\xe4\x9b\xff\x7b\xef\x7f\xef\xfd\xff\xfb\xdf\xcb\x97\xf9\xe8\xf5\x13\xc7\x12\x9a\x46\xf2\xd1\xe8\x0f\x0a\xad\xf0\x39\xf5\x58\xf8\x7e\x04\xbf\x87\x48\xa3\xd6\xe3\x82\xbb\x48\x44\x69\x22\x6a\x0d\x84\xf6\x4e\x66\xa7\x43\x3b\x49\x44\xbe\x25\x88\xba\xb1\x11\x70\x1c\xbc\x73\x57\xe0\x12\xb7\x9b\x29\xd1\xbf\x3e\xdf\xe0\x76\x79\xfe\x86\xe8\x77\x6d\x83\xf7\x2b\x5f\xfb\x9a\xdb\x05\xe3\x1b\xc1\x5f\x5e\x17\xfe\x97\x6f\x0a\x7b\xfe\x0e\x70\x1d\xb8\x06\xfc\x19\x78\x1b\x78\x0b\xb8\x0a\x5c\xe1\xd8\xfa\x42\xcc\x9f\x4a\x10\x6d\x04\x41\x90\x51\x92\x71\x91\xe7\x28\x8c\x73\x78\x60\x8c\xf7\x68\x2d\xc3\x4f\x23\x5a\x09\x82\xa0\x99\x20\xd2\xd1\x5f\xe7\x71\xeb\xbc\xbd\x74\x1d\xf1\x18\x62\x7e\xff\x8a\xf0\xf3\xad\x0c\xf2\x22\xd6\xe7\x5f\x4d\x83\x37\xc1\x8b\xf5\xfb\x9f\xe9\xe0\xb3\xe0\x45\x7c\xfe\x52\x06\xfc\x28\x78\x11\x7f\x53\x13\xeb\x6d\x62\xdd\xef\x3a\x22\xa0\x26\xe2\x19\x1a\xc5\xfc\x9f\x8a\x79\xfc\xa9\x09\xe1\xbf\x57\xe4\x91\xc5\xc1\xfd\x66\xe1\x97\x80\x1f\xb0\x99\x44\xbb\xa7\xb5\x6d\xde\x3e\x82\xf6\x7e\xb4\xd7\xb4\xb6\xcd\xdb\xdf\x21\x8a\x8c\xef\x2a\xe3\x1f\x95\xeb\x12\x71\xb6\xdb\xb1\x1f\x43\x7b\x04\x96\x0d\x91\x4f\xff\x86\xa8\x8f\xf7\xd3\x44\x2c\x92\x39\x60\xeb\x4b\xec\x4b\x3f\xd1\x52\x10\x04\x2d\x4b\xd8\x99\x44\x74\x5f\x5b\x1f\x87\xf1\x9c\xc5\xbe\x3d\x49\x44\xee\x7c\x56\xd4\xc5\x27\xf0\xd3\x88\x4c\xdb\x71\xd8\xfb\xe1\x91\xe2\x60\xdd\x30\x03\xc9\xcf\x9a\x27\x27\xd9\xbb\x39\x52\x99\xad\x1b\x99\x36\x6f\x56\x4b\x45\xf0\x95\xba\xa1\xb7\xf9\x7d\xa6\x3d\xc3\xde\x3d\xdb\x39\x54\x37\xd2\x6d\xde\xb3\x4a\x15\xf6\x5e\xb0\x58\x7f\x12\xf1\x5d\x17\x75\x3e\xd7\x27\xe2\xf2\x8b\xa2\x3e\x3a\xeb\x8e\x50\x77\xcf\x31\x1e\xfb\xc0\xe2\xd8\xa6\xf4\xd3\x83\x20\xa8\x1b\x22\x5f\xed\xfa\xbb\x21\xce\xe1\x70\xe2\xe9\x48\x9e\xeb\xc6\x25\xd4\xeb\x02\xb0\x06\xac\x02\xa7\x81\x67\x81\xa7\x81\xa7\x80\xc7\x81\x47\x80\x13\xc0\x51\x60\x16\x68\x02\x33\x40\x1d\xe7\x9b\xda\x75\x9c\xe0\x7c\xba\x6d\x2f\x10\xd1\xf3\x7b\xc2\xba\x61\xb6\x5f\xc0\xf9\x58\x16\xf1\xb1\xf8\xfb\x95\x3a\xa0\x7b\xd5\x81\x1b\xd6\xc1\x62\x47\x1d\xf8\x57\x44\xbe\xff\xfb\xf9\xc9\x6c\x52\x7e\xf4\x2d\x92\x1f\x73\x93\xf2\x93\xd9\x22\xf9\xc9\x6e\x52\x7e\xcc\x2d\x92\x9f\xd1\x4d\xca\x4f\x16\xf9\x79\xe6\x5f\x95\x1f\x7f\x19\xfa\xcd\xf8\xa7\x79\x9a\xd8\x94\x3c\x49\x5d\x73\x55\xf6\x53\xf5\x69\x87\x1e\xe5\xfa\x34\x15\xda\x49\xae\x43\x1b\x11\xdd\x54\x87\xbe\x90\xf9\x2e\x1b\x42\x67\x96\x2f\x7f\x27\xe2\x9f\x12\x03\x16\xf6\x7e\x1f\xd1\x91\x6d\x7d\x6b\x40\x8f\x42\x8f\x49\xbd\x26\xf5\x9c\xd4\x7b\x52\x0f\xd6\x0d\xa1\x47\xa5\x5e\x94\xed\x9d\x7f\xbf\x57\xbb\xe8\xcb\x7b\xe9\x9e\xc6\x03\xe8\x1e\xa6\x43\x6c\xc7\x39\xcc\xda\x46\x8a\x83\x54\x37\x16\x43\x3d\x73\x72\x92\x1f\xd6\x91\xca\xac\x29\xeb\x8f\xf1\xd5\x52\x11\x3c\xd3\x3f\x0b\x9d\x3a\xa7\xc6\xde\x4b\xde\x21\x53\xd6\x67\x5c\xe7\x88\x7a\x9d\x4b\xf5\xd6\x37\x55\xc4\x9d\xed\xd8\x7f\x55\xe7\xa8\xfb\xdf\xdf\xf1\x43\xfd\xf4\xff\x83\x47\xc3\x79\xe0\xb7\x15\xf2\xc2\x4a\xc3\xf5\x1c\xab\x60\x4f\x59\x85\xf2\x43\x5e\xe0\x43\x7a\x58\x4d\xb2\x7a\x64\xda\x9c\xe9\x72\xa6\xdd\x99\x6e\x67\xda\x9e\xe9\x7a\xa6\xfd\x99\xee\xef\xd2\xbf\xc6\xea\xbb\x57\xf7\x37\x4e\x9d\xa0\xbb\x41\x10\xe8\xf0\xd3\xe6\x27\x29\xfd\xe1\x76\xed\x29\x9c\xdf\x0c\xf8\x06\x46\x66\xff\x6e\xef\x93\x93\x24\xee\xbf\xee\xb7\xf9\xfd\xd4\x47\xa7\x95\xbe\xaf\x80\xaf\x29\xfc\x9f\x24\xf8\x45\xe5\x4c\xfc\x06\x7e\x5d\xe1\xcf\x60\x9c\x9b\xc9\x28\xff\x26\xf8\xf4\xb6\x28\xff\x2c\xf8\xdb\x0a\xbf\x1b\x7c\x36\x15\xe5\x7f\xc2\xbc\x77\x14\xfe\x47\xf0\xc7\xd3\x51\x7e\x1f\xc6\x59\x55\xfe\x3f\x7f\x0d\xbc\x3e\x10\xe5\x0f\x80\x9f\x56\xf8\xdf\x31\xfe\xc4\x60\x94\xff\x15\xfc\xa2\xc2\x0f\x63\x9c\x0d\x65\xde\x5f\xd0\x5f\xbd\x5f\x7f\x90\xe3\x77\xd9\xc3\x3e\xea\x8b\x93\x9c\x4f\xc6\xb8\x06\xaf\x93\xc1\x18\xff\x39\xe7\xb7\xc7\xf8\x63\x9c\x4f\xc5\xf8\x49\xce\xa7\x63\xfc\x19\xce\xc7\xd7\x93\xe2\x7c\x7c\x3d\x6b\x40\x0d\xb5\xbb\x92\x08\xed\x27\x88\x68\xb5\x3f\x6a\xaf\x25\xa3\xb6\x5c\x9a\xb4\xcd\x74\xd4\x3e\x32\x10\xb5\xa7\x07\xa3\xb6\xae\x45\xed\xdd\x58\x0f\xeb\xf6\xa8\xbc\xd7\x60\xf3\x4f\x57\x39\xcf\xae\x79\xc4\x6f\xb7\xea\xf9\xd2\x8c\x97\xcf\xbb\xbe\x9b\x67\x87\x96\x72\x8e\x5d\x09\x1b\xf6\x3b\xd6\x1c\x6b\x63\xa7\xda\xdd\xdf\xee\x74\xce\xaa\xba\xfb\xed\x0b\xf6\x8c\xe7\x8a\x77\xd9\x25\x3e\x26\xbb\x38\xee\x3f\x28\xef\x95\xbf\x60\x3b\x6e\xe9\xfc\x0c\xe5\x2b\xa5\x82\x3d\xe3\xda\xdc\x2f\x67\x4f\xe7\xdf\x73\xac\x73\x36\xe5\x5c\xcf\xf1\xac\x29\xca\xb9\xfe\x39\x86\x27\x8e\x1e\x1d\xcd\xbf\x2c\x60\x5c\xe2\x84\xc0\x97\x04\x1c\x00\x8e\x49\xfb\x20\xec\x83\x94\x73\xce\x17\x2d\xcf\x62\x83\x8e\xe5\xc6\xc0\xbf\x88\x51\x24\xbe\x00\x37\x00\x70\x4c\xda\xe3\xe8\x36\x06\x1e\x38\x3e\x1a\x2b\x91\x07\x7a\x9a\xbc\xfe\xe3\xcf\xfa\x2e\x81\x05\xe5\xdc\xa9\xdf\x2a\x35\xfc\x28\xd7\x0e\xbe\x59\xc6\x1f\x55\x12\xcc\xde\xc7\xbf\xa1\x1c\x41\xf5\x24\x7d\x40\x44\x03\x5d\xe6\x99\xc0\xfa\x17\x60\xef\x44\x9c\xd2\x5f\xfe\x5d\x30\x7b\xcc\xbf\x26\xe7\x4d\xdc\x7b\xfe\xdd\x3d\xe6\x5f\xd9\x15\x9d\x67\x27\xf4\xae\x3a\xff\xab\x98\x5f\xdd\x83\xb5\x1d\x02\xd5\xef\xa1\x6a\xfe\xde\xea\xe1\xbf\xf1\xc8\xdf\xf3\x4f\x42\x77\x8f\x2b\xbc\x3e\x24\xf0\xb4\xca\x03\xe5\xb0\xcb\x3d\xe6\x9f\x1e\xea\x3e\x9f\x5a\x3f\x4b\x3d\xfc\x2b\x3d\xfc\x55\xfb\x5b\xf8\xab\xd7\x7d\x15\xfe\x6a\x1d\xaa\xfb\xf7\x55\x8f\xfd\xbb\x85\xfd\x33\x61\xb3\xfd\xdb\xd1\x65\xff\x5a\x3d\xe4\xc2\x4d\xcc\x7f\xa9\xe3\x9e\x1e\xee\xf0\x97\xfa\xe3\xaf\x00\x00\x00\xff\xff\x3a\x65\xbf\x3f\x10\x18\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 6160, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

