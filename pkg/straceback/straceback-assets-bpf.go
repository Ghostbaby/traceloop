// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x3d\x6f\x13\x41\x10\x7d\xe7\xf3\x17\x4e\x04\x29\x00\x59\x22\x85\x4b\x0a\x64\x9b\xfc\x02\x13\x89\x40\xe1\xc2\x42\x42\x4a\xb7\x5a\xac\x05\x2c\xce\xf6\xe9\xee\x80\x04\x90\xa0\x89\x44\x41\x01\x05\xfc\x00\x0a\x1a\x7a\x52\x3a\x25\x05\x05\x15\x25\x25\x1d\x12\x05\x12\xa9\x38\xb4\x7b\x73\x9c\x99\xbd\xc3\x16\x0d\x45\x32\x92\x77\x3c\x6f\x67\xe6\xed\xcd\xcc\x7d\x3c\xbe\xdc\xdf\x2a\x39\x0e\x52\x71\xf0\x03\x99\x95\xc9\xd5\x5a\xf6\xbf\x47\xeb\x29\x38\x98\x9d\x4d\xb0\x3d\x00\x03\x00\x0f\x1b\x87\xb1\xb6\x67\xaf\x13\xbc\x56\x02\x0e\xe3\x38\x6e\xb2\xa4\x7b\x86\x0b\x38\x83\x8a\xb1\xa5\x9b\xe0\x33\x99\xe8\x66\xc9\xf6\x5f\x05\xb0\x4f\xf6\x4b\xd2\xff\x9b\x5f\xe7\xa8\x03\x28\x03\x78\x92\x53\xb7\xa3\x2a\x2e\xd5\xe4\xb8\x2e\x7f\xca\x71\x5d\xf2\xe5\xca\xa0\x8f\x9f\x71\x1c\xaf\x91\xed\x3c\xb8\x86\xfa\xa3\x15\xe7\x1c\x00\x8d\x35\x09\x4f\x6b\x76\x1a\xc0\x05\x86\xfd\x4d\xbe\x9a\xd5\x85\xcf\xf0\x2f\x66\xad\x58\x78\xe2\xed\xe6\xe6\x72\xe9\x99\x31\x2f\x33\x73\xce\x86\x85\xbf\x33\xf8\x8a\x85\xbf\x35\x78\xcd\xc2\x5f\x19\xbc\x6e\xe1\x5b\x06\x3f\x61\xe1\xd7\x0d\x6e\x9f\xb3\x66\x70\xfb\x9c\xe7\x49\x3b\xe4\xb3\x3d\x67\xd7\x17\xec\x6b\xf6\x75\xb2\x1b\x34\xcb\xdd\x39\x5b\xcf\x34\xda\x91\xda\x89\x10\x05\x72\xa8\xfc\xe9\x68\x12\x09\x11\xee\x86\x42\xed\x8c\x22\xb4\x03\xe5\x65\x1b\x9d\x40\xde\xd7\x7b\x43\xe9\x79\x61\xe7\xb7\xd3\x58\xfa\x61\x27\x92\x23\x4f\xe8\x8d\x04\xb3\xb2\x4d\x22\x15\x2c\x4e\x67\xbc\x78\xbe\x0c\x1c\xde\x0a\xa6\x77\x7d\x31\x96\x3e\xc4\x3d\x15\x84\xa3\xe9\x04\xc2\x1b\x0d\xd5\x24\x54\x26\x79\x5b\xdd\x16\x37\x03\x39\x56\x68\x87\x51\x10\xc9\x1b\x68\x87\xbb\x63\xad\xfb\x9b\x9b\x17\xc5\x86\x56\x5d\xb1\x61\xd5\xf8\x5f\xe4\x13\xd5\x93\xcb\xa0\x9a\xe8\xef\x0c\xe7\xef\x68\x87\x7e\x55\x86\xf7\x0a\xf8\xca\xcc\x9e\x2e\x88\xe7\xf7\x18\x9f\xd0\x3b\x34\x1f\x5c\xbe\xd1\x08\xb6\xc8\x3e\x49\xd7\x99\xc6\xa7\xf7\x7b\xab\x80\xff\x60\x49\xfe\xf5\x02\xfe\xb5\xaa\xcd\x5f\xc9\xe1\x7f\x43\xfc\xbc\x07\x3d\x2a\x34\xff\x7e\xe0\xf5\x7b\x51\x10\xbf\x5d\x5a\x2e\xfe\x52\x41\xbc\xef\x2e\x17\x7f\x50\x10\xff\xb4\x9c\xef\xcf\xe7\x67\xbf\x20\xfe\x59\x41\x3c\xb7\x3f\x50\x3c\xfb\x6c\xc2\x73\x72\xe4\x73\xc8\xfb\xf7\xbe\xa0\x7f\xdd\x9c\xfe\xad\xe6\xf4\xef\x73\x0e\xb7\x96\x8f\xc4\xdf\xa2\x0b\x76\x58\xff\xd3\xf7\xca\xaf\x00\x00\x00\xff\xff\xbe\xf1\x92\x0c\x08\x0b\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 2824, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x41\x68\x2b\x55\x14\xbd\x93\x34\x3f\xd3\x7c\x7e\x89\x20\x12\xc7\xbf\x98\x4d\x20\xc2\x27\xcd\x77\x21\xf2\xa1\x50\x0b\xd6\x4d\x2d\x52\x10\xdc\xa5\x63\x32\xb6\x81\x34\x0d\x33\xd3\x36\xe9\x08\x16\xc4\x85\x59\x15\x8b\x50\x54\xb0\x05\x17\xba\xd3\x55\xe2\x2a\x2e\x75\xd7\x65\x96\x59\x76\x99\x9d\x59\x75\xe4\xbe\x39\x93\x99\xbe\x99\xa1\x75\xef\x83\xcc\x7d\xf7\xbc\x77\xe7\xbc\xb9\xf7\xbc\x9b\x2f\x3f\xd8\xda\xcc\x28\x0a\x05\x43\xa1\x7f\x28\xf4\xc2\x31\x51\xc3\xf9\x3a\x9e\x2b\xa4\xd0\xf8\x0d\x1f\xfb\x9a\x88\x78\xcb\x38\x1f\xfa\x2b\xec\x2f\x87\x7e\x8e\x88\xf6\xf2\x44\x3a\x11\x9d\xc0\xba\x85\xf9\x1d\x09\x7b\xee\xb1\x1d\x82\xc7\x1d\x5c\x0a\xdf\x3d\xbd\xf2\xed\xf7\xbf\x08\xdb\x37\xfc\x0d\xae\xf6\x9b\x8f\x0f\xe6\xb0\x33\xd8\x5b\xd8\x29\xec\x04\xf6\x06\xf6\x2f\xd8\x3f\x61\x47\xc2\x8e\xaf\x7d\xde\xbc\x42\x34\xf2\x3c\x6f\x98\x21\x2a\xe2\xdc\x45\xc1\xfb\x1e\x78\x67\x38\x47\x0d\xfe\x2d\xfc\x0a\xfc\x29\x7c\x1d\xfe\x04\x7e\x09\xfe\x0d\xfc\x22\x7c\xff\x3c\xe3\x9f\xc1\xbf\x44\x74\xee\x79\xde\xd8\xf0\xfd\x52\xe6\x7e\x1d\xc6\xb6\x6f\x87\x39\xa2\x2e\xce\xf7\x26\x11\xd9\x83\x8a\x78\x4f\x49\x21\xd2\x4d\xcb\xe2\xf9\x5a\xb9\x59\x70\x35\x7d\x81\x1f\xe9\xdb\x3b\x3c\xd7\xcb\xed\x23\x57\x2b\x85\xfb\xbb\xad\x26\xf0\xb6\xab\x15\x17\xf8\x0b\xdd\xec\xf0\xdc\x31\xad\x57\xae\xa6\x2e\x70\xc7\x68\xb5\x79\xde\x30\x78\x3f\x09\xfc\x64\xd9\xaf\x67\xbf\xe9\xd7\x27\x9a\x4f\x42\x3e\xdf\x66\xfc\x02\xdf\x91\x0b\x75\xf1\x24\x52\xd7\x4f\x94\xd7\x88\xe5\xd8\xbf\x86\x2e\xf0\xfe\xa1\x42\x94\x11\xbe\x7f\x8e\x7e\xa3\x14\xe3\x29\x82\xe7\x0c\xef\x5d\x92\xf2\x4a\x8f\xcc\xeb\x79\x24\xaf\x43\xac\x7f\x17\xec\x93\xf5\xae\x86\xfe\x8a\xa4\xff\x5c\x54\xd7\x0a\x89\x7b\xe5\x6a\xbe\xae\xf7\x54\xdc\x03\x58\x77\x00\x9d\x9f\x26\xeb\x7c\x88\x4b\x19\xe8\x2f\xd0\x5d\xa0\xb7\x40\x67\x81\xbe\x02\x5d\xb9\x1a\x74\xae\x8d\x24\xdd\xcd\x1f\xa5\xfb\x47\xeb\xf2\xab\x64\x5d\xb2\x5e\x4c\xcb\x5a\xe3\xb5\x72\xb3\x40\xae\x76\x16\xea\x6e\x7b\x47\x5c\x92\x72\xfb\x48\x77\xb5\xde\x02\xef\xb6\x9a\xc0\x59\xa7\xdd\xa8\x1e\x7b\x3c\x6f\x39\xaf\x74\x57\xdb\x4f\xd1\xe3\xae\xaf\xc7\x7c\xba\x1e\x77\xf1\x9d\x95\x48\xdd\x65\x3d\xca\x75\x5f\x8a\xfc\xfc\xc7\xff\x83\x07\xe7\x9e\xf3\xce\xbd\x82\xfb\x04\xf7\x12\xee\x23\xdc\x6b\xb8\xcf\x70\x2f\xe2\x3e\x94\xb0\xbf\xc7\x75\x4c\xdb\xfe\xe1\xc7\x5b\x74\xe7\x79\x5e\x11\x71\xca\xe9\x0e\xa9\x5f\x3c\x55\xde\x82\x2e\x4b\xc0\x67\xd0\xe1\xeb\x44\xf4\x02\xd8\x3c\xe9\x0f\x4c\x1a\x7f\x8b\x67\x96\xa6\x99\xf8\x5a\x96\xb2\x89\x31\x59\xca\xc5\xb0\x6f\xc5\x79\x96\x63\xf8\x37\x02\x2f\xc4\xf0\x4d\x81\xe7\x63\xf8\x47\x02\x8f\xf3\xe6\x05\x1e\xe7\xdd\xc5\x37\x2a\xd0\xeb\x28\x73\xdf\x57\xa5\xf5\xe7\x88\xe3\x13\xf1\xd6\x5a\xc4\x17\xac\x55\xc7\xec\x39\xe4\x58\x46\xc3\xec\x1e\xb6\x3a\x4e\xbd\x6e\xf7\xed\x3a\x17\x89\xaa\x96\xd9\x0e\x17\x56\x2d\xe3\x84\xd7\xb8\x8a\xf6\xea\x62\xd3\x81\xd1\xb5\x57\xcd\x63\xb3\xe3\xd8\xf1\xb7\xb0\x34\x1e\x7e\x8d\xd8\x55\x3f\x36\x2d\xbb\x75\xd8\xa1\x7a\xbb\xd5\x30\x3b\xb6\x29\xe2\xaa\xe6\x7e\xfd\x73\xcb\x38\x30\xa9\x6a\x3b\x96\x63\x7c\x46\x55\xbb\x7f\x20\xac\x75\xd8\x34\x1c\x83\xe1\x97\xd5\x97\xef\xd2\xd6\xc6\x46\xad\xfe\x4e\x62\xfd\xfe\xcb\xf8\x35\xc8\x8b\x34\x54\xf4\xfb\x1b\x09\x97\x25\xa7\x44\x72\x1f\x1d\xeb\x29\x7c\x72\x4b\xd9\x7b\x20\x7e\x26\xe9\x56\x95\xf6\x35\x88\x12\x54\x49\x34\x82\xf4\x74\xf8\xcf\xf0\x9d\x41\x7c\x70\xdf\xf4\x14\xfe\x1a\x92\x22\xdf\x31\x99\xff\x79\x0a\xff\x24\x7f\x9f\xe7\x19\xfe\x27\x65\xfe\xf7\xc1\x2f\xd7\xa0\x82\xab\x50\x92\xf8\xe5\xfc\xfd\x81\x78\x59\x09\xeb\xf8\xa0\x4f\x25\x7c\xd1\x67\x60\x2f\x52\xf8\x2f\x9f\x24\xf3\xc9\xf5\x1f\xa4\xc4\xff\x98\x12\x2f\xfb\x3f\x21\x5e\x6e\x4f\x57\x88\x97\x75\x24\xe7\xff\x87\x94\xfc\xdf\x26\xd4\xff\x69\x42\xfe\x7f\x4f\xe0\xe6\x31\x05\xff\x04\xbe\x82\xb3\x07\xf1\x41\x5f\xfe\x37\x00\x00\xff\xff\x30\x05\x0c\x11\x58\x0c\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 3160, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

