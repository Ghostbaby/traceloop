// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xbf\x6f\xd3\x40\x14\xfe\x1c\x37\x24\x4d\x8b\xe8\x00\x28\x12\x1d\x32\x32\xa0\x24\x74\x62\x0c\x95\x28\x4b\x86\x0a\x09\xa9\x62\x31\x57\xeb\x80\x88\xfc\xb0\x6c\x03\x0d\x3f\x44\x97\x4a\xfd\x07\x98\x41\xa8\x03\x7f\x00\x12\x62\x0a\x03\x8c\x30\x32\x30\x33\x30\x30\x22\x51\x09\x09\xa3\xbb\x3c\xe3\xf0\xce\x47\x22\x96\x0c\xf4\x93\xe2\xcb\xfb\xee\x7d\xef\x9d\xdf\xbd\xb3\xfd\xf8\x52\x7b\xa3\xe0\x38\x48\xe1\xe0\x3b\x32\x2b\xc3\x7e\x39\xfb\xdf\xa2\xeb\x0a\x1c\x8c\x4e\x8f\xb9\x3d\x00\x9b\x00\x1e\x54\x0e\x13\x65\x8f\x9e\x8f\xf9\x52\x01\x38\x4c\x92\xa4\xca\x82\xee\xe9\x5c\xc0\x29\x14\xb5\x2d\xdc\x31\x3f\x12\xe3\xb1\x5a\x30\xfd\x97\x01\xbc\x22\xfb\x09\x8d\xf3\xce\xaf\x62\xa8\xd2\x2c\x00\xd8\xcd\xa9\xdb\xff\x0a\x97\x6a\x72\x54\x97\x3f\x71\x54\x97\x7c\xa4\xe7\xa8\x09\x2a\x0e\x00\x75\x04\xa3\x38\x14\xbe\xdc\x16\xfe\xed\x39\x2f\x70\x4e\xb8\xbc\xd9\xc6\xcf\x24\x49\x56\xc8\x76\xee\x5f\x41\xf9\xe1\x92\x73\x06\x80\xe2\xaa\xc4\xa7\xbd\x74\x12\xc0\x39\xc6\xfd\x0d\x3f\xf4\xd5\x45\xc0\xf8\x6f\xfa\x5a\x34\xf8\xb1\xb7\x9b\x1b\xcb\xa5\x67\xe9\x24\xde\xeb\x75\x2e\x19\xfc\x5b\xcd\x2f\x1b\xfc\x6b\xcd\x97\x0c\xfe\x9a\xe6\x2b\x06\x7f\xa0\xf9\xb2\xc1\x6f\x68\x7e\xd1\xe0\x7d\xcd\x9b\xeb\x2f\x69\xde\x5c\xff\x59\x1a\x1d\xf2\xd9\x9a\xb0\x17\xa7\xcc\xab\xd5\xae\x92\x5d\xa1\xb3\xdf\x9c\xb0\x75\x9b\xd7\x63\xb9\x13\x43\x77\x79\x30\xe8\xf4\x63\xcf\x8b\x86\x91\x27\x77\x3a\x31\xea\xa1\xec\x66\x13\x8d\x50\xdc\x53\x73\xbe\xe8\x76\xa3\xc6\x6f\xa7\x9e\x08\xa2\x46\x2c\x3a\x5d\x4f\x4d\x4c\x70\xa9\xab\x19\xbb\x1f\xcb\x70\x7a\x70\xed\xc5\xa3\x67\xa4\x7f\x33\x1c\xdc\x09\xbc\x9e\x08\xe0\xdd\x95\x61\xd4\x19\xf4\xe1\x75\x3b\xbe\xec\x47\x52\x07\xaf\xcb\x5b\xde\x8d\x50\xf4\x24\xea\x51\x1c\xc6\x62\x1b\xf5\x68\xd8\x53\x63\x7b\x7d\xfd\xbc\xb7\xa6\x86\xa6\xb7\x66\x54\xfc\xdf\xf0\x99\xea\xcb\xb1\x4b\xad\x54\x60\xef\x7f\xfe\x8d\xe3\xd0\xef\x18\xe3\x5b\x96\x7c\x0b\xcc\x7e\x34\x45\xcf\xcf\x22\xef\xd8\x21\xf5\x13\x47\x8d\xd6\x5f\x23\xfb\x04\xdd\x67\xaa\x4f\x9f\x0b\x35\x4b\xfe\x37\x33\xe6\x5f\xb5\xe4\x6f\xe5\xe4\x2f\xe6\xe4\x7f\x49\xf9\xf9\x1e\xb4\xa8\xd0\xfc\xfb\x8b\xd7\xef\xa9\x45\xbf\x55\x98\x4d\x7f\xd1\xa2\x0f\xdc\xd9\xf4\x57\x2d\xfa\xfd\x85\xd9\xf4\x1f\x2c\xfa\x67\xc5\x7c\x7f\xde\x7f\xef\x2c\xfa\x03\x8b\x9e\xdb\x9f\x48\xcf\x3e\x5b\xf1\x82\xf4\xbc\x8f\xf9\xfe\x7f\xb4\xec\xff\xf5\x9c\xfd\x3f\x9e\xb3\xff\x5f\x73\x72\x2b\x7c\xa1\xfc\x17\xe8\x86\x1d\xd6\x3f\xe9\xfb\xeb\x57\x00\x00\x00\xff\xff\x95\x3b\xfb\x65\x88\x0c\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 3208, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x4d\x68\x1b\xc7\x17\x7f\x2b\x4b\xd1\x5a\xc9\x3f\xd6\x3f\x34\xa9\xba\x0d\x65\x53\xea\xa2\x08\x57\x91\xf2\xa9\x06\x02\x26\xd0\x36\x87\x90\x9a\x40\x8b\x09\xa4\xf2\xc6\xda\x10\xe1\x2f\xb1\x92\x13\xcb\xdb\x52\xb5\x49\x20\x84\x16\xd4\x2f\x30\x3e\xe5\xeb\x90\x5e\x5a\xdf\x94\x9b\x72\xe8\x21\xa7\xe2\x53\xc9\xa9\xe4\x52\x30\x94\x82\x0f\x85\x1a\x5a\xbc\x65\x66\x7e\xab\xd5\xce\x4a\xd8\x35\x35\x76\xa0\x0b\xc9\x6f\xdf\x6f\xe6\xed\x9b\xf9\xcd\x9b\xb7\x3b\xf2\xc7\x6f\x9d\x7d\x3b\xa4\x28\xe4\x5e\x0a\xfd\x41\x9e\xe5\x5d\x4f\x5e\xf4\xee\x07\xf1\x7f\x9c\x14\x6a\xee\x13\xdc\x4d\x22\x52\x89\xa8\xa9\x7a\xf6\x6e\x66\x47\x85\x6d\xcf\xae\x38\x2e\x1f\x21\xa2\xaa\x21\x3a\xda\xda\x32\xe7\xed\x58\x9d\x63\xa3\x17\xfd\xe7\xe7\xb8\x3d\x36\x7f\x47\xe0\xed\x7b\x1c\x47\xb5\x07\xa2\xff\xec\x43\x81\xf3\x4b\xc0\x67\xc0\xa7\xc0\x45\xe0\x13\xe0\x63\xe0\x23\xe0\x02\xf0\x16\xb0\x06\x9c\x01\x96\x80\x57\x80\x23\x18\xe7\x30\xc7\xe6\x3d\x31\xce\x68\x88\x68\xd9\x71\x9c\x84\x24\xda\x4d\xae\xa5\xa7\xc7\x5e\x35\xcf\xb1\x79\x17\x7e\x0a\xd1\x82\xe3\x38\x8d\x10\x51\x1c\xfd\xe3\x5c\x97\x38\x6f\x2f\xde\x17\xf3\xb6\x35\x8c\x5b\x13\xf1\xab\x35\xe1\x5f\x35\x12\xd0\x0f\xf3\xd3\xc4\x38\xab\x37\x54\xb4\xeb\x68\x87\x0e\x9a\x98\x4f\xf5\xd3\x38\xda\x93\x68\x87\x5e\x9a\x98\x77\x43\x11\xe3\x6e\x44\x04\x5e\xac\x8b\x89\x31\x9b\x5d\x7d\xc7\x10\xff\xba\x88\x5f\x1d\xc9\x88\xe7\xc4\xa0\x7f\x4c\xe8\xd8\xc0\xfc\x2f\x7e\x0d\x7f\xe8\xd2\x37\x04\xff\x1b\x62\x7c\x55\x33\x27\xfc\x2f\x60\x1d\x2f\x88\xf5\x68\xc5\xff\x52\x8a\x0f\x6c\x3d\xff\xab\xce\xcf\x67\xba\xfa\xe2\x87\xd0\x1e\x72\xc7\x2f\xe6\xdf\xf2\xc7\xfa\xf5\x1d\x10\x38\xa6\x09\xfd\x9b\x0f\xb0\x5e\x61\xa2\xba\xe3\x38\x4d\x43\xd8\x89\x90\x7f\xbd\x13\x3d\x44\x8e\xe3\x38\xae\xcd\xc6\x3b\x82\x75\x7d\x89\xb5\x2b\x44\xba\x69\x59\xac\xed\x54\x7f\x21\x66\x6b\x83\xbc\x2f\xe3\xa7\xf5\x73\xe7\xd9\xbd\xde\x3f\x3e\x6d\x6b\xb9\x16\xaf\x97\x8a\x05\xf0\xe3\xb6\x96\x69\xf1\x03\xba\x39\xc9\xee\x2b\xa6\x75\xd2\xd6\x92\x2d\xbe\x62\x14\xc7\xd9\xfd\xa8\xc1\xfa\xeb\x9c\xbf\x16\x25\x62\x4a\x97\xe7\xcf\x88\xf5\x2f\xa8\x81\x3c\xd4\x91\x87\x07\x19\x5f\x16\x7c\x13\x3a\xb3\xf1\xef\x90\xf2\x7d\x85\xe9\x70\x1f\x76\x0f\xd1\x70\x87\xfc\x6f\x84\x3d\xff\x50\xdb\xfa\x7c\x03\x0c\xd4\x8d\xa8\x67\xef\x6e\xdb\x37\xf6\xed\x75\xd6\x0d\xac\xb7\x9d\x9a\x73\xda\xd7\x7b\x2c\x85\xfa\x31\x2b\xd5\x8f\xdb\xa8\x1f\x29\xe4\x5d\x0a\xf9\x9b\xc2\x7e\x48\x61\xdf\xa4\xb0\xbf\x52\xd8\x87\x29\xd4\x8f\x94\xa8\x1f\xee\x7e\x75\xf7\xe9\xba\xeb\x02\xe6\xbb\x37\x3a\x10\x58\x0f\x56\x17\x6c\x6d\x69\x55\x7e\xde\xca\x3a\xea\xcc\x7b\xea\x6b\x1c\xab\x77\x85\xbf\x5c\x5f\xfe\xcd\x7c\x36\x2d\xeb\x14\x6b\xeb\x2f\xc4\xc8\xd6\xe2\x5e\xde\x9e\x3b\xcf\x37\x77\xff\xf8\xb4\x6e\x6b\x6a\x8b\x2f\x15\x0b\xe0\x59\x9e\x53\x7b\x3e\xcf\xb0\xfb\x62\xe5\xa4\x6e\x6b\x2b\xab\xd4\x31\x9f\x97\x39\xef\xe6\xaf\x71\xff\x2f\x47\xd6\x6d\x79\x55\xe4\x71\xb2\x43\xfe\x06\xf2\xef\x5b\xf8\xf5\x12\xa9\x8e\xe3\x54\x2d\xac\x47\xa8\x5f\xcc\x17\x3a\xdb\x5a\xcd\x57\x1f\xdd\x3a\xea\xd6\x5b\xb7\x2e\xdb\xda\x30\x70\x08\x78\x06\x38\x08\xcc\x01\x33\xc0\x24\x50\x07\x26\x80\x71\xa0\xd0\xad\x7a\x1d\xe3\x38\x29\xe6\xef\xea\xc6\xc6\x17\xe2\xb6\xd0\x8b\xd9\xec\xd5\xf0\xc6\x01\xaf\xde\xd5\xb8\x3f\xf6\xfb\x17\x9e\x1e\x61\x29\x0f\x98\x6e\xff\x24\x0f\xe6\xda\xf2\xa0\x6a\xa9\xd0\xed\xf5\xed\xa5\xdb\x27\xee\x38\x96\x5b\xfa\x28\x1b\xd2\x2f\xbe\xc9\xfa\xc5\xb7\x67\xde\x75\xd0\x2f\xd4\xa6\xdf\xda\xba\x25\x36\x59\xb7\xc4\x73\x93\x77\x3d\x1b\xca\x3b\x7d\x93\xf5\xd3\x9f\x1b\xfd\xc2\x1b\xd2\x2f\xb9\xc9\xfa\x25\xa1\xdf\x1e\x67\xbb\xeb\x17\xd9\x90\x7e\x99\x4d\xd5\x2f\x42\xbf\xf2\xf8\xe1\xb6\x7f\x14\xa6\xff\x2e\x5c\x0a\xbe\x8b\xf9\x2a\x40\x17\x26\x71\xb9\x62\x19\xa3\xe6\x25\x63\x74\x6c\x8b\x07\xb8\x45\x97\xab\x0b\x3b\x35\xd6\xb6\x7a\x30\xdb\xf0\x62\xdf\xcc\xec\x7b\x99\x9d\x11\xd9\xf9\x90\x9d\x21\xd9\xf9\x91\x9d\x31\xd9\xf9\x92\x9d\x41\xd9\xf9\xb3\x43\xff\x19\xf6\xfd\xdd\xad\xfb\x3b\x43\x67\x69\xd5\x71\x9c\x38\xfc\x94\xd9\xf3\xa4\x7e\xb8\x53\x79\x19\xe7\x8a\x04\xf8\x1c\x72\xf5\x05\x22\x1a\x00\xa7\xc6\xd6\x1e\xf7\x47\xbc\xfc\xf4\xd0\x82\x54\x47\x3e\x00\xbf\x28\xf1\x83\xe0\x93\x52\xcd\x78\x17\xfc\xb2\x74\x4e\x7a\x15\x7c\x46\x7a\xce\x9f\x24\xf8\x92\xc4\xff\x0c\xbe\x2e\xf1\xd3\xfc\x39\x11\x7a\x28\xc5\x9d\x00\xaf\x46\xfc\xfc\x41\xf0\xcf\x24\x3e\x06\x7e\x70\x87\x9f\xff\x85\x04\xaf\x47\xfd\xfc\x65\xf4\x1f\x91\xcf\x7f\xe0\x6b\x52\xff\xf7\xdd\xfe\xaa\x9f\xcf\x81\x7f\x2c\xf1\x21\xf0\x77\x7a\xfd\xfc\x19\xf0\xb2\x3e\x59\x37\xae\xc4\xff\x8e\xf1\x5f\xe9\xf1\xf3\xbf\x81\x7f\x22\xf1\xc4\x55\xee\x40\x72\x3e\x12\xe0\x1a\x3c\xdf\x76\x06\xf8\xef\x38\xbf\x2b\xc0\x5f\xe4\x7c\x34\xc0\xef\xe2\x7c\x6f\x80\x2f\x72\x5e\x0d\xf0\x16\xe7\x83\xe3\x7c\x85\xf3\xc1\x71\xaa\x58\x27\x06\xfb\x89\x68\x25\xe4\xd9\x1a\x6b\x0f\x7b\x36\xdb\x43\x4b\xe4\xef\x9f\x53\xfc\xed\x75\xc5\xef\x3f\xd7\xe3\xb7\x9f\x86\xfd\x76\x7c\x87\xdf\x1e\x8a\xfa\xed\xba\xea\xb7\x17\x7b\xfd\xf6\x7e\x8c\x87\x6d\xdd\x7d\xee\x7b\x08\x36\xff\x29\x38\x5d\x31\x67\x2a\x34\x61\x94\xca\x87\x4a\xd6\xd4\x25\x33\x6f\x54\xf2\xe5\x6a\x39\xcf\xca\x08\xf1\x97\x54\x69\xaa\x38\x59\xc9\x7b\x64\xda\x32\xc7\xbd\x86\x43\x96\x71\x8d\xb5\xb1\xe2\x53\x3e\xd4\xea\xc4\x1f\x68\x5e\x35\x27\x2b\x65\x71\xef\x76\x09\x3e\x93\xd5\xb7\xb5\x1f\xca\x7b\xe5\xaf\x9a\x56\xb9\x38\x35\x49\xf9\xf1\xe2\xa8\x39\x59\x36\xb9\x5f\xda\xbc\x92\xbf\x6c\x19\x13\x26\xa5\xcb\x15\xab\x62\x5c\xa2\x74\xb9\x3a\xc1\xf0\xec\xe9\xd3\x99\xfc\x9b\x0c\xb2\xf9\x2c\x30\x27\xe0\x84\x68\x3c\x21\xac\xc3\xc0\xec\x71\x4a\x5b\x53\x05\xa3\x62\xb0\x47\x65\xd3\xd9\xe3\xa2\xdb\x31\x34\x03\x8f\xc2\xeb\xa8\x68\xcd\xc2\x3e\x22\xcc\x23\x68\x85\x99\x75\x6d\x3c\xc3\xc5\x2c\x9a\xb3\x68\xce\x04\x92\x6f\x03\xd7\x8f\x44\x1d\x77\x61\x0e\xbf\xd3\x7d\x2e\xd5\x1d\xf9\x6f\x04\x0a\xfe\x49\xe5\x0c\x7f\x2b\x08\x5e\xf2\xa7\xde\x67\x6b\xf8\xe7\x24\x07\x79\x87\xde\x22\xea\xb0\x9b\x89\x86\xf7\x0a\x74\x45\xea\xc3\x3c\x5d\x7f\xf7\x7d\x76\xa2\x4b\xfc\x19\xc4\x95\xdf\x61\x72\xfc\x23\x5d\xe2\xdf\x42\xfc\x7a\x5b\xfc\x48\x87\xf8\xc3\x88\x2f\xaf\x41\x6d\xb7\x40\xf9\x77\x3f\x59\xbf\x42\x17\xff\xb9\xbe\xf5\xf9\x47\xbb\xf8\x2f\xc4\xd7\xe7\xbf\x07\xbf\xaf\x1c\x96\xf8\xc5\xff\x0b\x1c\x96\xf8\xd6\x77\x04\xf0\x51\x97\xf8\xc9\x3d\x9d\xe3\xc9\xf9\xf7\x7d\x17\xff\x81\x2e\xfe\xb2\xfd\x03\xfc\xa5\xd7\x19\x65\xe0\x2f\xe7\xb1\xbc\xfe\x8f\xbb\xac\x7f\x02\xfb\x47\x87\xcd\x96\xe3\x7f\x1d\xd6\xff\xa7\x0e\xb1\xd9\x55\x42\xfc\xa5\xb6\xf7\x47\xa2\xcd\xdf\xfd\xee\xfa\x3b\x00\x00\xff\xff\x99\x61\x32\xbe\xc8\x1b\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 7112, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

