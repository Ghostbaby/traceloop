// Code generated by go-bindata.
// sources:
// ../dist/straceback-main-bpf.o
// ../dist/straceback-tailcall-bpf.o
// DO NOT EDIT!

package straceback

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stracebackMainBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\x3d\x6f\x13\x31\x18\x7e\x9c\x6b\x48\x68\x3a\x74\x01\x45\x02\xa4\xb2\x75\xba\x20\x7e\x41\x55\xc4\xc7\x90\xa1\x82\x85\xcd\x32\x91\x5b\x22\x5d\x92\x93\x6d\xa0\x85\x4a\xb0\x94\x91\x0d\x36\x16\x7e\x01\x1b\x63\xf8\x19\x8c\xfc\x04\x06\x24\x32\x71\xc8\xbe\xd7\x5c\x79\xef\x4e\x85\x99\xbe\xc3\x39\xcf\xe3\xf7\xf1\x6b\x3f\xfe\xc8\xcb\xdb\xe3\x3b\x1d\x21\x10\x43\xe0\x07\x2a\x54\xc5\xc7\xb5\xea\xf7\x0e\x7d\x37\x20\xb0\xbc\x5c\x72\x27\x00\xf6\x00\xbc\x58\x5f\x15\x1e\x2f\x3f\x94\x7c\xaf\x03\xac\x8a\xa2\x18\xb2\x41\x4f\x42\x2d\xe0\x12\xba\x01\xab\xa4\xe4\x97\xaa\x6c\x87\x9d\x7a\xfe\x06\x80\x4f\x84\xdf\xfe\x9e\x2f\xd0\x07\xe0\xa7\xf7\xaa\x61\xde\xff\x6b\x24\xe4\xc9\xb9\x2f\x7f\xc6\xdd\xbd\x31\x7e\x16\x45\xb1\x49\x58\x3c\xbf\x8f\xfe\xf1\x40\x5c\x01\xe0\xb9\x21\xf1\x67\x79\xf6\x2e\x7c\x13\xe4\x0d\x7d\x09\x92\x1a\xb7\x08\xe3\xf7\x6a\xfc\x7e\xe0\xfb\x35\xfe\x5e\xe0\xbb\x35\xfe\x61\xe0\x2f\xd4\xf8\x5e\xe0\xeb\x75\xb7\xa9\xf5\xf7\xa4\x4b\xfa\x88\xfd\x28\x57\x09\xaf\x03\x08\x57\x2e\x75\xfa\xd0\xc1\x19\x35\xd1\xf9\x62\x3a\x77\x52\xda\x23\x2b\xf5\xdc\x69\x83\xd4\xe8\xac\xea\x19\x19\xf5\xcc\x77\x4e\x54\x96\xd9\x51\x95\x35\x53\xb9\x1d\x4d\x0e\xcc\xe2\x49\x2e\x67\x2a\x2f\xb1\x53\xd3\x4c\xfa\xcc\x40\xc9\xa7\xda\xd8\xe9\x62\x0e\x99\x4d\x27\x7a\x6e\x75\x18\x3a\xd5\x8f\xe5\xbe\x51\x33\x8d\xd4\x3a\xe3\xd4\x23\xa4\xf6\x68\xe6\xdb\xf1\xee\xee\x0d\x79\xb3\xc1\xea\x7f\x8e\xd7\x74\x37\x78\x6c\xd2\xfb\xf6\x9e\xf1\xfc\x2d\x14\xa7\xbc\x3b\x1d\x3b\x2d\xf5\xd6\x18\xbe\x7e\x86\x9e\x9f\x3b\x7e\x32\xae\x01\xb8\xd8\x50\xe7\x2b\x2d\x6a\x8b\xf0\x80\xd6\x19\xf5\xf1\xbc\xdf\xa2\xfa\xdc\x83\xcf\xd4\xf2\x77\x9a\xcf\xff\x41\x8b\xfe\x8b\xf8\x3b\x7d\xde\xa2\xff\xd6\x69\xce\xe7\xfe\x1f\xb4\xe8\xbf\xb7\xe8\x39\x3e\x26\x3d\xfb\x7b\xc1\x8a\x88\x6d\xc6\x73\xff\x0f\x5b\xfc\x8f\x85\xa2\xcf\x03\xca\xe3\xfe\xbf\x69\xa8\xed\x63\x8b\x16\x14\xf7\x41\xb0\xfd\x8b\xef\xd2\xaf\x00\x00\x00\xff\xff\x8a\x1f\x81\xef\xb0\x07\x00\x00")

func stracebackMainBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackMainBpfO,
		"straceback-main-bpf.o",
	)
}

func stracebackMainBpfO() (*asset, error) {
	bytes, err := stracebackMainBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-main-bpf.o", size: 1968, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stracebackTailcallBpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\xbf\x6f\xd3\x5c\x14\x3d\x4e\x9b\x26\x4d\xab\x4f\x91\x3e\x09\x05\xc3\x60\x55\xaa\x54\x06\xdc\x96\x01\x21\x24\xa4\x2e\xfc\x18\x2a\xa8\x3a\xc1\x64\x1e\xcd\x03\x22\xdc\xc4\xb2\xdd\x26\xae\x91\x8a\x84\x90\x2a\x16\xb2\x20\x31\x16\x89\x81\x11\xb1\xa4\x9b\x33\x32\x32\x32\x32\x76\x64\x83\x09\xa3\xf7\x7c\x1d\xbb\xcf\x09\xf9\x07\xb8\x92\x7d\xdf\x3d\xf6\xbd\xe7\xfa\xdc\xf7\x7c\x78\x73\xf3\x56\x49\xd3\x90\x9a\x86\x9f\xc8\xa2\xcc\x56\xca\xd9\x7a\x83\xee\x8b\xd0\x10\x9d\x4b\xb0\x57\x00\xaa\x00\xa2\x6a\x16\xff\x27\xe2\x4a\x16\x8b\x12\x61\xed\x38\x16\xf1\x93\x2a\x60\x00\xe8\x92\x0f\x5f\x7f\x94\x78\x78\xf0\x49\xfa\x80\x25\x85\x42\xfd\x44\xc6\x03\x6a\x2a\xd4\x7f\x25\xef\xe9\x3f\xc8\x9f\x92\xff\x4e\xfe\x1b\xf9\xaf\xe4\xbf\x90\x1f\x4a\x1f\xbd\x4f\xea\x54\x34\x60\x18\xc7\xf1\xa0\x04\xd4\xa9\xbf\xba\xe4\xbd\x76\x86\x27\x60\x6b\xc8\xf3\x05\x6c\x05\x79\xde\x80\x19\xc8\xf3\x07\xac\x81\x7c\x1f\x01\xab\x23\xdf\x4f\xf4\x81\xf8\x67\x81\xe3\x38\x8e\x23\x96\xc4\x8d\xd2\x59\xbd\xa3\x97\x89\x1f\x94\x81\x87\xd4\xdf\x79\xd2\xa1\x06\xe0\x99\xde\x97\xf5\x1a\x1a\xb0\x67\x70\x57\xac\xdd\x1b\xcb\xcd\x50\x3f\x1a\xe1\xf6\x9e\x71\x57\xac\xb7\x8d\x65\x3b\xd4\x5f\x8c\xf0\xeb\x86\xd3\x12\xeb\xa6\xc4\x7b\x23\xdc\x67\x2d\x5b\xac\x77\x98\x6d\x87\xba\x23\xf1\x6e\x25\x99\x4f\xd0\x4c\xe6\x91\xd7\xcf\x21\xfd\x96\x04\xee\x51\xdf\xe5\x6c\xde\x73\xa2\x5f\xfa\x9e\xb7\xe4\x67\x73\x57\x72\xfb\x67\x79\x13\x33\x10\xfa\x8b\x19\x89\xf9\x88\x19\x8a\xf9\x89\x19\x8b\xf9\xd6\x70\x7b\x6b\x13\xc0\xef\x38\x96\xf3\xa9\x53\x9e\x76\xb0\x8d\xea\xf3\x05\xed\x02\x61\x0d\xc2\xd7\x4a\xd3\x39\x67\x30\x53\xc0\xee\xcb\x3a\x95\x02\x7e\x4f\xe2\xd5\x02\xbe\x28\xf1\x72\x01\xff\x5f\xe2\xc5\xfa\x77\xe8\x3c\x6b\xb4\x0d\x2e\x12\x5e\x23\x0c\xa6\xcf\x7b\x3e\x76\x99\xe3\xad\xf2\x7d\xde\xf6\x3d\xf8\x2e\xdb\xe1\x4e\xa7\xd5\xf6\x2d\xcb\x0b\x3c\x8b\xb7\x7d\xee\xc2\x74\xb9\x9d\x3d\x59\x75\x59\x57\x3c\x14\x12\x7a\xab\xd9\x5b\xd6\x3e\x77\xbd\x56\xa7\x0d\xcb\x6e\xed\xf0\xb6\xc7\x65\x9e\xc9\x9f\x5a\x8f\x5d\xb6\xcb\x61\x7a\xbe\xeb\xb3\x47\x30\xbd\x60\x57\x7a\xb7\xd3\x64\x3e\x13\xf0\xba\xb9\x7e\x75\xba\x86\xd3\xac\x23\x75\x2e\xda\x3b\x3a\x03\x6f\x14\x5c\xfd\x07\x6b\x74\xcd\x29\xf8\xc6\x04\x3e\xf5\x68\x5d\x9e\x92\xaf\xee\x13\x75\xc2\x97\x00\xcc\x8f\xe1\xe9\x11\x51\xba\x0f\x17\xe8\x3b\xd3\xfc\x14\xaf\x10\xbf\xaa\x81\x43\xbc\x0d\xed\xef\xfd\x1f\x52\xfe\x15\x05\xef\x53\xc1\x25\x05\x1f\x9d\x0b\xf2\x0f\x26\xf0\x7f\x9e\x19\xcf\xa7\xea\xbf\x35\x21\xff\x64\x42\xbe\x1a\x73\xca\x57\x8f\xe3\x90\xf2\x57\x14\x5c\xd5\x9f\x4d\xd0\xff\x68\x8c\xfe\xf3\x63\xf4\xef\x8e\xe1\x16\x76\x4a\xfc\x7d\x8a\xd3\x1e\xd3\xfc\xf4\x3f\xf2\x27\x00\x00\xff\xff\xde\x71\xc1\x5a\x28\x08\x00\x00")

func stracebackTailcallBpfOBytes() ([]byte, error) {
	return bindataRead(
		_stracebackTailcallBpfO,
		"straceback-tailcall-bpf.o",
	)
}

func stracebackTailcallBpfO() (*asset, error) {
	bytes, err := stracebackTailcallBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "straceback-tailcall-bpf.o", size: 2088, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"straceback-main-bpf.o": stracebackMainBpfO,
	"straceback-tailcall-bpf.o": stracebackTailcallBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"straceback-main-bpf.o": &bintree{stracebackMainBpfO, map[string]*bintree{}},
	"straceback-tailcall-bpf.o": &bintree{stracebackTailcallBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

